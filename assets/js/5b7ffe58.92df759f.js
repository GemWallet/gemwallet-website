"use strict";(self.webpackChunkgemwallet_website=self.webpackChunkgemwallet_website||[]).push([[7868],{7765:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return m}});var a=t(3117),l=t(102),r=(t(7294),t(4137)),s=["components"],i={id:"gemwallet-api-reference",title:"Reference",description:"Provides the documentation on how to use GemWallet API."},o=void 0,p={unversionedId:"api/gemwallet-api-reference",id:"version-3.0.0/api/gemwallet-api-reference",title:"Reference",description:"Provides the documentation on how to use GemWallet API.",source:"@site/versioned_docs/version-3.0.0/api/reference.md",sourceDirName:"api",slug:"/api/gemwallet-api-reference",permalink:"/docs/api/gemwallet-api-reference",draft:!1,editUrl:"https://github.com/GemWallet/gemwallet-website/blob/master/versioned_docs/version-3.0.0/api/reference.md",tags:[],version:"3.0.0",frontMatter:{id:"gemwallet-api-reference",title:"Reference",description:"Provides the documentation on how to use GemWallet API."},sidebar:"docs",previous:{title:"Installation",permalink:"/docs/api/gemwallet-api-installation"},next:{title:"getAddress",permalink:"/docs/playground/getAddress"}},u={},m=[{value:"Methods",id:"methods",level:2},{value:"getAddress",id:"getaddress",level:3},{value:"Request",id:"request",level:4},{value:"Response",id:"response",level:4},{value:"Error Handling",id:"error-handling",level:4},{value:"Examples",id:"examples",level:4},{value:"getNetwork",id:"getnetwork",level:3},{value:"Request",id:"request-1",level:4},{value:"Response",id:"response-1",level:4},{value:"Error Handling",id:"error-handling-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"getNFT",id:"getnft",level:3},{value:"Request",id:"request-2",level:4},{value:"Response",id:"response-2",level:4},{value:"Error Handling",id:"error-handling-2",level:4},{value:"Examples",id:"examples-2",level:4},{value:"getPublicKey",id:"getpublickey",level:3},{value:"Request",id:"request-3",level:4},{value:"Response",id:"response-3",level:4},{value:"Error Handling",id:"error-handling-3",level:4},{value:"Examples",id:"examples-3",level:4},{value:"isInstalled",id:"isinstalled",level:3},{value:"Request",id:"request-4",level:4},{value:"Response",id:"response-4",level:4},{value:"Examples",id:"examples-4",level:4},{value:"sendPayment",id:"sendpayment",level:3},{value:"Request",id:"request-5",level:4},{value:"Response",id:"response-5",level:4},{value:"Error Handling",id:"error-handling-4",level:4},{value:"Examples",id:"examples-5",level:4},{value:"setTrustLine",id:"settrustline",level:3},{value:"Request",id:"request-6",level:4},{value:"Response",id:"response-6",level:4},{value:"Error Handling",id:"error-handling-5",level:4},{value:"Examples",id:"examples-6",level:4},{value:"signMessage",id:"signmessage",level:3},{value:"Request",id:"request-7",level:4},{value:"Response",id:"response-7",level:4},{value:"Error Handling",id:"error-handling-6",level:4},{value:"Examples",id:"examples-7",level:4}],d={toc:m};function c(e){var n=e.components,t=(0,l.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"getaddress"},"getAddress"),(0,r.kt)("p",null,"Retrieves the wallet address associated with the extension."),(0,r.kt)("h4",{id:"request"},"Request"),(0,r.kt)("p",null,"This function does not require any parameters."),(0,r.kt)("h4",{id:"response"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"address"),": The classic address of the wallet.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  address: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { getAddress } from "@gemwallet/api";\n\ngetAddress().then((response) => {\n  console.log(response.result?.address);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, getAddress } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        getAddress().then((response) => {\n          console.log(`Your address: ${response.result?.address}`);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"getnetwork"},"getNetwork"),(0,r.kt)("p",null,"Retrieves the network associated with the extension."),(0,r.kt)("h4",{id:"request-1"},"Request"),(0,r.kt)("p",null,"This function does not require any parameters."),(0,r.kt)("h4",{id:"response-1"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"network"),": The network name as a string.")))),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Mainnet")," if the user is connected to the ",(0,r.kt)("inlineCode",{parentName:"li"},"main network"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Testnet")," if the user is connected to the ",(0,r.kt)("inlineCode",{parentName:"li"},"test network"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Devnet")," if the user is connected to the ",(0,r.kt)("inlineCode",{parentName:"li"},"developer network"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AMM-Devnet")," if the user is connected to the ",(0,r.kt)("inlineCode",{parentName:"li"},"AMM Devnet"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  network: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-1"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-1"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { getNetwork } from "@gemwallet/api";\n\ngetNetwork().then((response) => {\n  console.log(response.result?.network);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, getNetwork } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        getNetwork().then((response) => {\n          console.log(`Your network: ${response.result?.network}`);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"getnft"},"getNFT"),(0,r.kt)("p",null,"Retrieves NFTs associated with the wallet."),(0,r.kt)("h4",{id:"request-2"},"Request"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Optional")," - This function requires an optional payload parameter which has properties defined by ",(0,r.kt)("inlineCode",{parentName:"p"},"GetNFTRequest"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"limit"),": The maximum number of NFTs to return."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marker"),": A value from a previous paginated response. This is used to resume retrieving data where the previous response left off.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface GetNFTRequest {\n  // Limit the number of NFTokens to retrieve.\n  limit?: number;\n  // Value from a previous paginated response. Resume retrieving data where that response left off.\n  marker?: unknown;\n}\n")),(0,r.kt)("h4",{id:"response-2"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"account_nfts"),": AccountNFToken[] - An array of NFTs associated with the wallet."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marker"),": A value to be used as a marker in a subsequent request.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response"\nresult: {\n  account_nfts: AccountNFToken[]\n  marker: unknown\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface AccountNFToken {\n  Flags: number;\n  Issuer: string;\n  NFTokenID: string;\n  NFTokenTaxon: number;\n  URI?: string;\n  nft_serial: number;\n}\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-2"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-2"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { getNFT } from "@gemwallet/api";\n\ngetNFT({ limit: 10 }).then((response) => {\n  console.log(response.result?.account_nfts);\n});\n')),(0,r.kt)("p",null,"Here is an example of implementation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, getNFT } from "@gemwallet/api";\n\nfunction App() {\n  const handleNFTs = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        getNFT().then((result) => {\n          console.log("Your NFTs: ", result.result?.account_nfts);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleNFTs}>Show my NFTs!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"getpublickey"},"getPublicKey"),(0,r.kt)("p",null,"Retrieves the public key associated with the wallet."),(0,r.kt)("h4",{id:"request-3"},"Request"),(0,r.kt)("p",null,"This function does not require any parameters."),(0,r.kt)("h4",{id:"response-3"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"address"),": Classic address of the wallet."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"publicKey"),": Public key of the wallet.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  address: string;\n  publicKey: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-3"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-3"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { getPublicKey } from "@gemwallet/api";\n\ngetPublicKey().then((response) => {\n  console.log(`${response.result?.address} - ${response.result?.publicKey}`);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, getPublicKey } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        getPublicKey().then((response) => {\n          console.log(\n            `${response.result?.address} - ${response.result?.publicKey}`\n          );\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"isinstalled"},"isInstalled"),(0,r.kt)("p",null,"Checks if the GemWallet extension is installed in the user's browser."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"We definitely recommend that you check if the user has GemWallet installed before using any of the other methods available.")),(0,r.kt)("h4",{id:"request-4"},"Request"),(0,r.kt)("p",null,"This function does not require any parameters."),(0,r.kt)("h4",{id:"response-4"},"Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"result: {\n  isInstalled: boolean;\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isInstalled"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," if the user has GemWallet extension installed, ",(0,r.kt)("inlineCode",{parentName:"li"},"false")," otherwise.")),(0,r.kt)("h4",{id:"examples-4"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled } from "@gemwallet/api";\n\nisInstalled().then((response) => {\n  console.log(response.result.isInstalled);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (!response.result.isInstalled) {\n        console.log("GemWallet is not installed");\n      } else {\n        console.log("GemWallet is installed");\n      }\n    });\n  };\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"sendpayment"},"sendPayment"),(0,r.kt)("p",null,"Initiates a payment transaction through the extension."),(0,r.kt)("h4",{id:"request-5"},"Request"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mandatory")," - The function takes a payload object as an input parameter, which has properties defined by ",(0,r.kt)("inlineCode",{parentName:"p"},"SendPaymentRequest"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount"),": The amount to deliver, in one of the following formats:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("em",{parentName:"li"},"string")," representing the number of XRP to deliver, in drops."),(0,r.kt)("li",{parentName:"ul"},"An ",(0,r.kt)("em",{parentName:"li"},"object")," where 'value' is a string representing the number of the token to deliver."),(0,r.kt)("li",{parentName:"ul"},"More technical details about the amount formats can be found ",(0,r.kt)("a",{parentName:"li",href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts"},"here"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"destination"),": The unique address of the account receiving the payment."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"memos"),": The memos to attach to the transaction. Each attribute of each memo must be hex encoded.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"More technical details about the memos can be found ",(0,r.kt)("a",{parentName:"li",href:"https://xrpl.org/transaction-common-fields.html#memos-field"},"here"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"destinationTag"),": The destination tag to attach to the transaction."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fee"),": Integer amount of XRP, in drops, to be destroyed as a cost for distributing this transaction to the network.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"More technical details about the drops can be found ",(0,r.kt)("a",{parentName:"li",href:"https://xrpl.org/currency-formats.html#xrp-amounts"},"here"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"flags"),": Flags to set on the transaction.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface SendPaymentRequest {\n  // The amount to deliver, in one of the following formats:\n  // - A string representing the number of XRP to deliver, in drops.\n  // - An object where 'value' is a string representing the number of the token to deliver.\n  amount: Amount;\n  // The unique address of the account receiving the payment\n  destination: string;\n  // The memos to attach to the transaction\n  // Each attribute of each memo must be hex encoded\n  memos?: Memo[];\n  // The destination tag to attach to the transaction\n  destinationTag?: number;\n  // Integer amount of XRP, in drops, to be destroyed as a cost for distributing this transaction to the network\n  fee?: string;\n  // Flags to set on the transaction\n  flags?: PaymentFlags;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Amount {\n  currency: string;\n  issuer: string;\n  value: string;\n} | string;\n")),(0,r.kt)("p",null,"More details about the amount format can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Memo {\n  memo: {\n    memoType?: string;\n    memoData?: string;\n    memoFormat?: string;\n  };\n}\n")),(0,r.kt)("p",null,"More technical details about the memos can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/transaction-common-fields.html#memos-field"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface PaymentFlags {\n  tfNoDirectRipple?: boolean;\n  tfPartialPayment?: boolean;\n  tfLimitQuality?: boolean;\n} | number;\n")),(0,r.kt)("p",null,"More details about the flags can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/transaction-common-fields.html#flags-field"},"here"),"."),(0,r.kt)("h4",{id:"response-5"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hash"),": The hash of the transaction.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  hash: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-4"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-5"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { sendPayment } from "@gemwallet/api";\n\nconst payload = {\n  amount: "1000000", // In drops (1 XRP)\n  destination: "rLWQskMM8EoPxaLsmuQxE5rYeP4uX7dhym",\n  memos: [\n    {\n      memo: {\n        memoType: "4465736372697074696f6e",\n        memoData: "54657374206d656d6f",\n      },\n    },\n  ],\n  destinationTag: 12,\n  fee: "199",\n  flags: {\n    tfNoDirectRipple: false,\n    tfPartialPayment: false,\n    tfLimitQuality: false,\n  },\n};\n\nsendPayment(payload).then((response) => {\n  console.log(response.result?.hash);\n});\n')),(0,r.kt)("p",null,"Here is an example for an XRP Payment with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, sendPayment } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const payment = {\n          amount: "1000000", // In drops (1 XRP)\n          destination: "rLWQskMM8EoPxaLsmuQxE5rYeP4uX7dhym",\n        };\n        sendPayment(payment).then((response) => {\n          console.log("Transaction Hash: ", response.result?.hash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("p",null,"Here is an example for an ETH Payment with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, sendPayment } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const payment = {\n          amount: {\n            currency: "ETH",\n            value: "0.01", // In currency\n            issuer: "rnm76Qgz4G9G4gZBJVuXVvkbt7gVD7szey",\n          },\n          destination: "rLWQskMM8EoPxaLsmuQxE5rYeP4uX7dhym",\n        };\n        sendPayment(payment).then((trHash) => {\n          console.log("Transaction Hash: ", trHash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"settrustline"},"setTrustLine"),(0,r.kt)("p",null,"Adds or edits a trustline within the wallet."),(0,r.kt)("h4",{id:"request-6"},"Request"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mandatory")," - The function takes a payload of type ",(0,r.kt)("inlineCode",{parentName:"p"},"SetTrustlineRequest")," as an input parameter."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"limitAmount"),": The maximum amount of currency that can be exchanged to the trustline.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"More technical details about the amount formats can be found ",(0,r.kt)("a",{parentName:"li",href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts"},"here"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fee"),": Integer amount of XRP, in drops, to be destroyed as a cost for distributing this transaction to the network. Some transaction types have different minimum requirements.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"More technical details about the drops can be found ",(0,r.kt)("a",{parentName:"li",href:"https://xrpl.org/currency-formats.html#xrp-amounts"},"here"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"memos"),": The memos to attach to the transaction. Each attribute of each memo must be hex encoded.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"More technical details about the memos can be found ",(0,r.kt)("a",{parentName:"li",href:"https://xrpl.org/transaction-common-fields.html#memos-field"},"here"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"flags"),": Flags to set on the transaction.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface SetTrustlineRequest {\n  // The maximum amount of currency that can be exchanged to the trustline\n  limitAmount: IssuedCurrencyAmount;\n  // Integer amount of XRP, in drops, to be destroyed as a cost for distributing this transaction to the network.\n  // Some transaction types have different minimum requirements.\n  fee?: string;\n  // The memos to attach to the transaction\n  // Each attribute of each memo must be hex encoded\n  memos?: Memo[];\n  // Flags to set on the transaction\n  flags?: TrustSetFlags;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface IssuedCurrencyAmount {\n  currency: string;\n  issuer: string;\n  value: string;\n}\n")),(0,r.kt)("p",null,"More technical details about the currency amount formats can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Memo {\n  memo: {\n    memoType?: string;\n    memoData?: string;\n    memoFormat?: string;\n  };\n}\n")),(0,r.kt)("p",null,"More technical details about the memos can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/transaction-common-fields.html#memos-field"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface TrustSetFlags {\n  tfSetfAuth?: boolean;\n  tfSetNoRipple?: boolean;\n  tfClearNoRipple?: boolean;\n  tfSetFreeze?: boolean;\n  tfClearFreeze?: boolean;\n} | number;\n")),(0,r.kt)("p",null,"More details about the flags can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/transaction-common-fields.html#flags-field"},"here"),"."),(0,r.kt)("h4",{id:"response-6"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hash"),": The hash of the transaction.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  hash: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-5"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-6"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { setTrustline } from "@gemwallet/api";\n\nconst trustline = {\n  limitAmount: {\n    currency: "ETH",\n    issuer: "rnm76Qgz4G9G4gZBJVuXVvkbt7gVD7szey",\n    value: "10000000",\n  },\n  memos: [\n    {\n      memo: {\n        memoType: "4465736372697074696f6e",\n        memoData: "54657374206d656d6f",\n      },\n    },\n  ],\n  fee: "199",\n  flags: {\n    tfClearFreeze: false,\n    tfClearNoRipple: false,\n    tfSetFreeze: true,\n    tfSetNoRipple: true,\n    tfSetfAuth: false,\n  },\n};\n\nsetTrustline(trustline).then((response) => {\n  console.log(response.result?.hash);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, addTrustline } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const transaction = {\n          limitAmount: {\n            currency: "ETH",\n            issuer: "rnm76Qgz4G9G4gZBJVuXVvkbt7gVD7szey",\n            value: "10000000",\n          },\n        };\n        addTrustline(transaction).then((response) => {\n          console.log("Transaction Hash: ", response.result?.hash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"signmessage"},"signMessage"),(0,r.kt)("p",null,"Signs a message using the private key of the user's wallet."),(0,r.kt)("h4",{id:"request-7"},"Request"),(0,r.kt)("p",null,"The function takes a message string as an input parameter."),(0,r.kt)("h4",{id:"response-7"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"signedMessage"),": The signed message.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  signedMessage: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-6"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-7"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { signMessage } from "@gemwallet/api";\n\nconst message = "Hello, World!";\n\nsignMessage(message).then((response) => {\n  console.log(response.result?.signedMessage);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, signMessage } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        signMessage("The message I want to get signed").then((response) => {\n          console.log("Signed message: ", response.result?.signedMessage);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')))}c.isMDXComponent=!0}}]);