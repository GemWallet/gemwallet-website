"use strict";(self.webpackChunkgemwallet_website=self.webpackChunkgemwallet_website||[]).push([[966],{37034:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>a});var t=s(85893),i=s(11151);const l={id:"using-gemwallet-in-node-js",title:"Using GemWallet in Node.js",description:"Provides the documentation on how to use GemWallet in a Node.js application like React thanks to npm."},d=void 0,r={id:"api/using-gemwallet-in-node-js",title:"Using GemWallet in Node.js",description:"Provides the documentation on how to use GemWallet in a Node.js application like React thanks to npm.",source:"@site/versioned_docs/version-2.2.1/api/using-in-node-js.md",sourceDirName:"api",slug:"/api/using-gemwallet-in-node-js",permalink:"/docs/2.2.1/api/using-gemwallet-in-node-js",draft:!1,unlisted:!1,editUrl:"https://github.com/GemWallet/gemwallet-website/blob/master/versioned_docs/version-2.2.1/api/using-in-node-js.md",tags:[],version:"2.2.1",frontMatter:{id:"using-gemwallet-in-node-js",title:"Using GemWallet in Node.js",description:"Provides the documentation on how to use GemWallet in a Node.js application like React thanks to npm."},sidebar:"docs",previous:{title:"Using GemWallet in the browser",permalink:"/docs/2.2.1/api/using-gemwallet-in-browser"},next:{title:"addTrustline",permalink:"/docs/2.2.1/playground/addTrustline"}},o={},a=[{value:"Installing the library",id:"installing-the-library",level:2},{value:"Methods",id:"methods",level:2},{value:"isConnected()",id:"isconnected",level:3},{value:"getAddress()",id:"getaddress",level:3},{value:"getNetwork()",id:"getnetwork",level:3},{value:"getNFT()",id:"getnft",level:3},{value:"getPublicKey()",id:"getpublickey",level:3},{value:"sendPayment()",id:"sendpayment",level:3},{value:"signMessage()",id:"signmessage",level:3},{value:"addTrustline()",id:"addtrustline",level:3}];function c(n){const e={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.admonition,{type:"info",children:(0,t.jsx)(e.p,{children:"This page assumes that you have GemWallet installed."})}),"\n",(0,t.jsx)(e.h2,{id:"installing-the-library",children:"Installing the library"}),"\n",(0,t.jsx)(e.p,{children:"Let's first install the library from npm:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:["Install the module using npm: ",(0,t.jsx)(e.code,{children:"npm install @gemwallet/api"})]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:["Install the module using yarn: ",(0,t.jsx)(e.code,{children:"yarn add @gemwallet/api"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Now let's dig into what functionalities are available to you."}),"\n",(0,t.jsx)(e.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(e.h3,{id:"isconnected",children:"isConnected()"}),"\n",(0,t.jsx)(e.admonition,{type:"tip",children:(0,t.jsx)(e.p,{children:"We definitely recommend that you check if the user is connected before using any of the other methods available."})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:"isConnected() -> <Promise<boolean>>"})}),"\n",(0,t.jsxs)(e.p,{children:["Returns ",(0,t.jsx)(e.code,{children:"true"})," if the user has GemWallet extension installed, and ",(0,t.jsx)(e.code,{children:"false"})," otherwise."]}),"\n",(0,t.jsx)(e.p,{children:"Here is an example with a React web application:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'import { isConnected } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isConnected().then((isConnected) =>\n      console.log(`Is the user having GemWallet installed? ${isConnected}`)\n    );\n  };\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,t.jsx)(e.h3,{id:"getaddress",children:"getAddress()"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:"getAddress() -> <Promise<string|null|undefined>>"})}),"\n",(0,t.jsx)(e.p,{children:"Returns:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"string"})," returns the classic address of the wallet."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"null"})," user refused to share the address within GemWallet."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"undefined"})," something went wrong."]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Here is an example with a React web application:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'import { isConnected, getAddress } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isConnected().then((isConnected) => {\n      if (isConnected) {\n        getAddress().then((address) => {\n          console.log(`Your address: ${address}`);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,t.jsx)(e.h3,{id:"getnetwork",children:"getNetwork()"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:"getNetwork() -> <Promise<'Mainnet'|'Testnet'|'Devnet'|'AMM-Devnet'>>"})}),"\n",(0,t.jsx)(e.p,{children:"Returns:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"Mainnet"})," if the user is connected to the ",(0,t.jsx)(e.code,{children:"main network"}),"."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"Testnet"})," if the user is connected to the ",(0,t.jsx)(e.code,{children:"test network"}),"."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"Devnet"})," if the user is connected to the ",(0,t.jsx)(e.code,{children:"developer network"}),"."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"AMM-Devnet"})," if the user is connected to the ",(0,t.jsx)(e.code,{children:"AMM Devnet"}),"."]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Here is an example with a React web application:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'import { isConnected, getNetwork } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isConnected().then((isConnected) => {\n      if (isConnected) {\n        getNetwork().then((network) => {\n          console.log(`Your network: ${network}`);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,t.jsx)(e.h3,{id:"getnft",children:"getNFT()"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:"getNFT(optionalParameters) -> <Promise<AccountNFToken[]|null|undefined>>"})}),"\n",(0,t.jsx)(e.p,{children:"Take as parameter an optional object:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"optionalParameters"})," object"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"const optionalParameters = {\n  // Limit the number of NFTokens to retrieve.\n  limit?: number;\n  // Value from a previous paginated response.\n  // Resume retrieving data where that response left off.\n  marker?: unknown;\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"Returns:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"AccountNFToken[]"})," returns an array of owned NFTs."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"null"})," user refused to share owned NFTs within GemWallet."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"undefined"})," something went wrong."]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"interface AccountNFToken {\n  Flags: number;\n  Issuer: string;\n  NFTokenID: string;\n  NFTokenTaxon: number;\n  URI?: string;\n  nft_serial: number;\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"Here is an example of implementation:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'import { isConnected, getNFT } from "@gemwallet/api";\n\nfunction App() {\n  const handleNFTs = () => {\n    isConnected().then((isConnected) => {\n      if (isConnected) {\n        getNFT().then((trHash) => {\n          console.log("Your NFTs: ", trHash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleNFTs}>Show my NFTs!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,t.jsx)(e.h3,{id:"getpublickey",children:"getPublicKey()"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:"getPublicKey() -> <Promise<{ publicKey: string, address: string }|null|undefined>>"})}),"\n",(0,t.jsx)(e.p,{children:"Returns:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"{ publicKey: string, address: string }"})," returns the public key and the classic address of the wallet."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"null"})," user refused to share the public key within GemWallet."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"undefined"})," something went wrong."]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Here is an example with a React web application:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'import { isConnected, getPublicKey } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isConnected().then((isConnected) => {\n      if (isConnected) {\n        getPublicKey().then(({ publicKey }) => {\n          console.log(`Your public key: ${publicKey}`);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,t.jsx)(e.h3,{id:"sendpayment",children:"sendPayment()"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:"sendPayment(payment) -> <Promise<string|null|undefined>>"})}),"\n",(0,t.jsx)(e.p,{children:"Take as parameters:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"payment"})," object"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"const payment = {\n  // \tThe amount of currency to deliver\n  amount: string;\n  // The unique address of the account receiving the payment\n  destination: string;\n  // The token that can be used\n  currency?: string;\n  // The issuer of the token\n  issuer?: string;\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"Returns:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"string"})," returns the hash of the transaction."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"null"})," user refused the payment within GemWallet."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"undefined"})," something went wrong."]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Here is an example for an XRP Payment with a React web application:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'import { isConnected, sendPayment } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isConnected().then((isConnected) => {\n      if (isConnected) {\n        const payment = {\n          amount: "10",\n          destination: "rLWQskMM8EoPxaLsmuQxE5rYeP4uX7dhym",\n        };\n        sendPayment(payment).then((trHash) => {\n          console.log("Transaction Hash: ", trHash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,t.jsx)(e.p,{children:"Here is an example for an ETH Payment with a React web application:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'import { isConnected, sendPayment } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isConnected().then((isConnected) => {\n      if (isConnected) {\n        const payment = {\n          amount: "10",\n          destination: "rLWQskMM8EoPxaLsmuQxE5rYeP4uX7dhym",\n          currency: "ETH",\n          issuer: "rnm76Qgz4G9G4gZBJVuXVvkbt7gVD7szey",\n        };\n        sendPayment(payment).then((trHash) => {\n          console.log("Transaction Hash: ", trHash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,t.jsx)(e.h3,{id:"signmessage",children:"signMessage()"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:"signMessage(message) -> <Promise<string|null|undefined>>"})}),"\n",(0,t.jsx)(e.p,{children:"Take as parameters:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"message"})," string"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Returns:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"string"})," returns the signed message."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"null"})," user refused the payment within GemWallet."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"undefined"})," something went wrong."]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Here is an example with a React web application:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'import { isConnected, signMessage } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isConnected().then((isConnected) => {\n      if (isConnected) {\n        signMessage("The message I want to get signed").then(\n          (signedMessage) => {\n            console.log("Signed message: ", signedMessage);\n          }\n        );\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,t.jsx)(e.h3,{id:"addtrustline",children:"addTrustline()"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:"addTrustline(transaction) -> <Promise<string|null|undefined>>"})}),"\n",(0,t.jsx)(e.p,{children:"Take as parameters:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"transaction"})," object"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"const transaction = {\n  // The token to be used\n  currency: string;\n  // The address of the account owing the token\n  issuer: string;\n  // Integer amount of XRP, in drops, to be destroyed as a cost for distributing this transaction to the network.\n  // Some transaction types have different minimum requirements.\n  fee?: string;\n  // \tThe maximum amount of currency that can be exchanged to the trustline\n  value: string;\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"Returns:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"string"}),": hash of the transaction"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"null"}),": user refused the payment"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"undefined"}),": something went wrong"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Here is an example with a React web application:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'import { isConnected, addTrustline } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isConnected().then((isConnected) => {\n      if (isConnected) {\n        const transaction = {\n          currency: "USD",\n          issuer: "rwtDvu9QDfCskWuyE2TSEt3s56RbiWUKJN",\n          value: "10000000",\n        };\n        addTrustline(transaction).then((trHash) => {\n          console.log("Transaction Hash: ", trHash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})})]})}function h(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}}}]);