"use strict";(self.webpackChunkgemwallet_website=self.webpackChunkgemwallet_website||[]).push([[318],{47406:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return r},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var i=t(83117),a=t(80102),o=(t(67294),t(3905)),l=["components"],s={id:"using-gemwallet-in-node-js",title:"Using GemWallet in Node.js",description:"Provides the documentation on how to use GemWallet in a Node.js application like React thanks to npm.",sidebar_position:3},r=void 0,p={unversionedId:"api/using-gemwallet-in-node-js",id:"version-1.0.2/api/using-gemwallet-in-node-js",title:"Using GemWallet in Node.js",description:"Provides the documentation on how to use GemWallet in a Node.js application like React thanks to npm.",source:"@site/versioned_docs/version-1.0.2/api/using-in-node-js.md",sourceDirName:"api",slug:"/api/using-gemwallet-in-node-js",permalink:"/docs/1.0.2/api/using-gemwallet-in-node-js",draft:!1,editUrl:"https://github.com/GemWallet/gemwallet-website/blob/master/versioned_docs/version-1.0.2/api/using-in-node-js.md",tags:[],version:"1.0.2",sidebarPosition:3,frontMatter:{id:"using-gemwallet-in-node-js",title:"Using GemWallet in Node.js",description:"Provides the documentation on how to use GemWallet in a Node.js application like React thanks to npm.",sidebar_position:3},sidebar:"docs",previous:{title:"Using GemWallet in the browser",permalink:"/docs/1.0.2/api/using-gemwallet-in-browser"},next:{title:"isConnected",permalink:"/docs/1.0.2/playground/isConnected"}},d={},c=[{value:"Installing the library",id:"installing-the-library",level:2},{value:"Methods",id:"methods",level:2},{value:"isConnected()",id:"isconnected",level:3},{value:"getNetwork()",id:"getnetwork",level:3},{value:"transactionRequest()",id:"transactionrequest",level:3}],u={toc:c};function m(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This page assumes that you have GemWallet installed.")),(0,o.kt)("h2",{id:"installing-the-library"},"Installing the library"),(0,o.kt)("p",null,"Let's first install the library from npm:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Install the module using npm: ",(0,o.kt)("inlineCode",{parentName:"p"},"npm install @gemwallet/api"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Install the module using yarn: ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn add @gemwallet/api")))),(0,o.kt)("p",null,"Now let's dig into what functionalities are available to you."),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"isconnected"},"isConnected()"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"We definitely recommend that you check if the user is connected before using any of the other methods available.")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"isConnected() -> <Promise<boolean>>")),(0,o.kt)("p",null,"Returns ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if the user has GemWallet extension installed, and ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,o.kt)("p",null,"Here is an example with a React web application:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { isConnected } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isConnected().then((isConnected) =>\n      console.log(`Is the user having gemwallet installed? ${isConnected}`)\n    );\n  };\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,o.kt)("h3",{id:"getnetwork"},"getNetwork()"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"getNetwork() -> <Promise<'TEST'|'MAIN'>>")),(0,o.kt)("p",null,"Returns ",(0,o.kt)("inlineCode",{parentName:"p"},"TEST")," if the user is connected to the ",(0,o.kt)("inlineCode",{parentName:"p"},"test network"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"MAIN")," if connected to the ",(0,o.kt)("inlineCode",{parentName:"p"},"main network"),"."),(0,o.kt)("p",null,"Here is an example with a React web application:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { isConnected, getNetwork } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isConnected().then((isConnected) => {\n      if (isConnected) {\n        getNetwork().then((network) => {\n          console.log(`NETWORK: ${network}`);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,o.kt)("h3",{id:"transactionrequest"},"transactionRequest()"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"transactionRequest() -> <Promise<'waiting'|'pending'|'success'|'rejected'>>")),(0,o.kt)("p",null,"Transaction can have 4 stages:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"waiting"),": waiting for a user interaction"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"pending"),": transaction is pending to be a success or rejected (in progress)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"success"),": transaction has been successful"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"rejected"),": transaction has been rejected")),(0,o.kt)("p",null,"Here is an example with a React web application:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { isConnected, transactionRequest } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isConnected().then((isConnected) => {\n      if (isConnected) {\n        const transaction = {\n          chain: "xrp",\n          network: "TEST",\n          transaction: "payment",\n          amount: "50",\n          destination: "rMrXopFSnCDSd5Eej4TpeHrV7SPjKtLpo2",\n          token: "xrp",\n          apiVersion: 1,\n        };\n        transactionRequest(transaction).then((status) => {\n          console.log(`TRANSACTION STATUS: ${status}`);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')))}m.isMDXComponent=!0}}]);