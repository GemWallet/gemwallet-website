"use strict";(self.webpackChunkgemwallet_website=self.webpackChunkgemwallet_website||[]).push([[3573],{46361:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return r},metadata:function(){return p},toc:function(){return c}});var i=n(83117),a=n(80102),o=(n(67294),n(3905)),s=["components"],r={id:"using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN.",sidebar_position:2},l=void 0,p={unversionedId:"api/using-gemwallet-in-browser",id:"version-1.0.2/api/using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN.",source:"@site/versioned_docs/version-1.0.2/api/using-in-browser.md",sourceDirName:"api",slug:"/api/using-gemwallet-in-browser",permalink:"/docs/1.0.2/api/using-gemwallet-in-browser",draft:!1,editUrl:"https://github.com/GemWallet/gemwallet-website/blob/master/versioned_docs/version-1.0.2/api/using-in-browser.md",tags:[],version:"1.0.2",sidebarPosition:2,frontMatter:{id:"using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN.",sidebar_position:2},sidebar:"docs",previous:{title:"GemWallet API",permalink:"/docs/1.0.2/api/gemwallet-api"},next:{title:"Using GemWallet in Node.js",permalink:"/docs/1.0.2/api/using-gemwallet-in-node-js"}},d={},c=[{value:"Importing the library",id:"importing-the-library",level:2},{value:"Methods",id:"methods",level:2},{value:"isConnected()",id:"isconnected",level:3},{value:"getNetwork()",id:"getnetwork",level:3},{value:"transactionRequest()",id:"transactionrequest",level:3}],m={toc:c};function u(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This page assumes that you have GemWallet installed.")),(0,o.kt)("h2",{id:"importing-the-library"},"Importing the library"),(0,o.kt)("p",null,"Let's first import the library in the ",(0,o.kt)("inlineCode",{parentName:"p"},"<head>")," tag of our page."),(0,o.kt)("p",null,"Install the packaged library via script tag using cdnjs, swapping in the desired version number for {version}. You can also replace {version} with ",(0,o.kt)("inlineCode",{parentName:"p"},"master")," to get the last version (not recommended)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<head>\n  <script src="https://cdn.jsdelivr.net/gh/GemWallet/gemwallet-extension@{version}/dist/gemwallet-api.min.js"><\/script>\n</head>\n')),(0,o.kt)("p",null,"This will expose a global variable called ",(0,o.kt)("inlineCode",{parentName:"p"},"window.gemWalletApi")," that will contain our library."),(0,o.kt)("p",null,"Now let's dig into what functionalities are available to you."),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"isconnected"},"isConnected()"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"We recommend that you check if the user is connected before using any of the other methods available.")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"isConnected() -> <Promise<boolean>>")),(0,o.kt)("p",null,"Returns ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if the user has GemWallet extension installed, and ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'gemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    console.log("User has GemWallet!");\n  } else {\n    console.log("User doesn\'t have GemWallet!");\n  }\n});\n')),(0,o.kt)("h3",{id:"getnetwork"},"getNetwork()"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"getNetwork() -> <Promise<'TEST'|'MAIN'>>")),(0,o.kt)("p",null,"Returns ",(0,o.kt)("inlineCode",{parentName:"p"},"TEST")," if the user is connected to the ",(0,o.kt)("inlineCode",{parentName:"p"},"test network"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"MAIN")," if connected to the ",(0,o.kt)("inlineCode",{parentName:"p"},"main network"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"gemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    gemWalletApi.getNetwork().then((network) => {\n      console.log(`NETWORK: ${network}`);\n    });\n  }\n});\n")),(0,o.kt)("h3",{id:"transactionrequest"},"transactionRequest()"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"transactionRequest() -> <Promise<'waiting'|'pending'|'success'|'rejected'>>")),(0,o.kt)("p",null,"Transaction can have 4 stages:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"waiting"),": waiting for a user interaction"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"pending"),": transaction is pending to be a success or rejected (in progress)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"success"),": transaction has been successful"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"rejected"),": transaction has been rejected")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'gemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    const transaction = {\n      chain: "xrp",\n      network: "TEST",\n      transaction: "payment",\n      amount: "50",\n      destination: "rMrXopFSnCDSd5Eej4TpeHrV7SPjKtLpo2",\n      token: "xrp",\n      apiVersion: 1,\n    };\n    gemWalletApi.transactionRequest(transaction).then((status) => {\n      console.log(`TRANSACTION STATUS: ${status}`);\n    });\n  }\n});\n')))}u.isMDXComponent=!0}}]);