"use strict";(self.webpackChunkgemwallet_website=self.webpackChunkgemwallet_website||[]).push([[7868],{95153:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>d});var r=s(85893),t=s(11151);const l={id:"gemwallet-api-reference",title:"Reference",description:"Provides the documentation on how to use GemWallet API."},i=void 0,a={id:"api/gemwallet-api-reference",title:"Reference",description:"Provides the documentation on how to use GemWallet API.",source:"@site/versioned_docs/version-3.0.0/api/reference.md",sourceDirName:"api",slug:"/api/gemwallet-api-reference",permalink:"/docs/3.0.0/api/gemwallet-api-reference",draft:!1,unlisted:!1,editUrl:"https://github.com/GemWallet/gemwallet-website/blob/master/versioned_docs/version-3.0.0/api/reference.md",tags:[],version:"3.0.0",frontMatter:{id:"gemwallet-api-reference",title:"Reference",description:"Provides the documentation on how to use GemWallet API."},sidebar:"docs",previous:{title:"Installation",permalink:"/docs/3.0.0/api/gemwallet-api-installation"},next:{title:"getAddress",permalink:"/docs/3.0.0/playground/getAddress"}},o={},d=[{value:"Methods",id:"methods",level:2},{value:"getAddress",id:"getaddress",level:3},{value:"Request",id:"request",level:4},{value:"Response",id:"response",level:4},{value:"Error Handling",id:"error-handling",level:4},{value:"Examples",id:"examples",level:4},{value:"getNetwork",id:"getnetwork",level:3},{value:"Request",id:"request-1",level:4},{value:"Response",id:"response-1",level:4},{value:"Error Handling",id:"error-handling-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"getNFT",id:"getnft",level:3},{value:"Request",id:"request-2",level:4},{value:"Response",id:"response-2",level:4},{value:"Error Handling",id:"error-handling-2",level:4},{value:"Examples",id:"examples-2",level:4},{value:"getPublicKey",id:"getpublickey",level:3},{value:"Request",id:"request-3",level:4},{value:"Response",id:"response-3",level:4},{value:"Error Handling",id:"error-handling-3",level:4},{value:"Examples",id:"examples-3",level:4},{value:"isInstalled",id:"isinstalled",level:3},{value:"Request",id:"request-4",level:4},{value:"Response",id:"response-4",level:4},{value:"Examples",id:"examples-4",level:4},{value:"sendPayment",id:"sendpayment",level:3},{value:"Request",id:"request-5",level:4},{value:"Response",id:"response-5",level:4},{value:"Error Handling",id:"error-handling-4",level:4},{value:"Examples",id:"examples-5",level:4},{value:"setTrustLine",id:"settrustline",level:3},{value:"Request",id:"request-6",level:4},{value:"Response",id:"response-6",level:4},{value:"Error Handling",id:"error-handling-5",level:4},{value:"Examples",id:"examples-6",level:4},{value:"signMessage",id:"signmessage",level:3},{value:"Request",id:"request-7",level:4},{value:"Response",id:"response-7",level:4},{value:"Error Handling",id:"error-handling-6",level:4},{value:"Examples",id:"examples-7",level:4}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(n.h3,{id:"getaddress",children:"getAddress"}),"\n",(0,r.jsx)(n.p,{children:"Retrieves the wallet address associated with the extension."}),"\n",(0,r.jsx)(n.h4,{id:"request",children:"Request"}),"\n",(0,r.jsx)(n.p,{children:"This function does not require any parameters."}),"\n",(0,r.jsx)(n.h4,{id:"response",children:"Response"}),"\n",(0,r.jsxs)(n.p,{children:["The response is a Promise which resolves to an object with a ",(0,r.jsx)(n.code,{children:"type"})," and ",(0,r.jsx)(n.code,{children:"result"})," property."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"}),": ",(0,r.jsx)(n.code,{children:'"response" | "reject"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"result"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"address"}),": The classic address of the wallet."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'type: "response";\nresult: {\n  address: string;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"or"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'type: "reject";\nresult: undefined;\n'})}),"\n",(0,r.jsx)(n.h4,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"In case of error, the error will be thrown."}),"\n",(0,r.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { getAddress } from "@gemwallet/api";\n\ngetAddress().then((response) => {\n  console.log(response.result?.address);\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"Here is an example with a React web application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { isInstalled, getAddress } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        getAddress().then((response) => {\n          console.log(`Your address: ${response.result?.address}`);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,r.jsx)(n.h3,{id:"getnetwork",children:"getNetwork"}),"\n",(0,r.jsx)(n.p,{children:"Retrieves the network associated with the extension."}),"\n",(0,r.jsx)(n.h4,{id:"request-1",children:"Request"}),"\n",(0,r.jsx)(n.p,{children:"This function does not require any parameters."}),"\n",(0,r.jsx)(n.h4,{id:"response-1",children:"Response"}),"\n",(0,r.jsxs)(n.p,{children:["The response is a Promise which resolves to an object with a ",(0,r.jsx)(n.code,{children:"type"})," and ",(0,r.jsx)(n.code,{children:"result"})," property."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"}),": ",(0,r.jsx)(n.code,{children:'"response" | "reject"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"result"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"network"}),": The network name as a string."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Returns:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Mainnet"})," if the user is connected to the ",(0,r.jsx)(n.code,{children:"main network"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Testnet"})," if the user is connected to the ",(0,r.jsx)(n.code,{children:"test network"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Devnet"})," if the user is connected to the ",(0,r.jsx)(n.code,{children:"developer network"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"AMM-Devnet"})," if the user is connected to the ",(0,r.jsx)(n.code,{children:"AMM Devnet"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'type: "response";\nresult: {\n  network: string;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"or"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'type: "reject";\nresult: undefined;\n'})}),"\n",(0,r.jsx)(n.h4,{id:"error-handling-1",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"In case of error, the error will be thrown."}),"\n",(0,r.jsx)(n.h4,{id:"examples-1",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { getNetwork } from "@gemwallet/api";\n\ngetNetwork().then((response) => {\n  console.log(response.result?.network);\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"Here is an example with a React web application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { isInstalled, getNetwork } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        getNetwork().then((response) => {\n          console.log(`Your network: ${response.result?.network}`);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,r.jsx)(n.h3,{id:"getnft",children:"getNFT"}),"\n",(0,r.jsx)(n.p,{children:"Retrieves NFTs associated with the wallet."}),"\n",(0,r.jsx)(n.h4,{id:"request-2",children:"Request"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Optional"})," - This function requires an optional payload parameter which has properties defined by ",(0,r.jsx)(n.code,{children:"GetNFTRequest"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"limit"}),": The maximum number of NFTs to return."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"marker"}),": A value from a previous paginated response. This is used to resume retrieving data where the previous response left off."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface GetNFTRequest {\n  // Limit the number of NFTokens to retrieve.\n  limit?: number;\n  // Value from a previous paginated response. Resume retrieving data where that response left off.\n  marker?: unknown;\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"response-2",children:"Response"}),"\n",(0,r.jsxs)(n.p,{children:["The response is a Promise which resolves to an object with a ",(0,r.jsx)(n.code,{children:"type"})," and ",(0,r.jsx)(n.code,{children:"result"})," property."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"}),": ",(0,r.jsx)(n.code,{children:'"response" | "reject"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"result"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"account_nfts"}),": AccountNFToken[] - An array of NFTs associated with the wallet."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"marker"}),": A value to be used as a marker in a subsequent request."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'type: "response"\nresult: {\n  account_nfts: AccountNFToken[]\n  marker: unknown\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface AccountNFToken {\n  Flags: number;\n  Issuer: string;\n  NFTokenID: string;\n  NFTokenTaxon: number;\n  URI?: string;\n  nft_serial: number;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"or"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'type: "reject";\nresult: undefined;\n'})}),"\n",(0,r.jsx)(n.h4,{id:"error-handling-2",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"In case of error, the error will be thrown."}),"\n",(0,r.jsx)(n.h4,{id:"examples-2",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { getNFT } from "@gemwallet/api";\n\ngetNFT({ limit: 10 }).then((response) => {\n  console.log(response.result?.account_nfts);\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"Here is an example of implementation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { isInstalled, getNFT } from "@gemwallet/api";\n\nfunction App() {\n  const handleNFTs = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        getNFT().then((result) => {\n          console.log("Your NFTs: ", result.result?.account_nfts);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleNFTs}>Show my NFTs!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,r.jsx)(n.h3,{id:"getpublickey",children:"getPublicKey"}),"\n",(0,r.jsx)(n.p,{children:"Retrieves the public key associated with the wallet."}),"\n",(0,r.jsx)(n.h4,{id:"request-3",children:"Request"}),"\n",(0,r.jsx)(n.p,{children:"This function does not require any parameters."}),"\n",(0,r.jsx)(n.h4,{id:"response-3",children:"Response"}),"\n",(0,r.jsxs)(n.p,{children:["The response is a Promise which resolves to an object with a ",(0,r.jsx)(n.code,{children:"type"})," and ",(0,r.jsx)(n.code,{children:"result"})," property."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"}),": ",(0,r.jsx)(n.code,{children:'"response" | "reject"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"result"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"address"}),": Classic address of the wallet."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"publicKey"}),": Public key of the wallet."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'type: "response";\nresult: {\n  address: string;\n  publicKey: string;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"or"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'type: "reject";\nresult: undefined;\n'})}),"\n",(0,r.jsx)(n.h4,{id:"error-handling-3",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"In case of error, the error will be thrown."}),"\n",(0,r.jsx)(n.h4,{id:"examples-3",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { getPublicKey } from "@gemwallet/api";\n\ngetPublicKey().then((response) => {\n  console.log(`${response.result?.address} - ${response.result?.publicKey}`);\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"Here is an example with a React web application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { isInstalled, getPublicKey } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        getPublicKey().then((response) => {\n          console.log(\n            `${response.result?.address} - ${response.result?.publicKey}`\n          );\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,r.jsx)(n.h3,{id:"isinstalled",children:"isInstalled"}),"\n",(0,r.jsx)(n.p,{children:"Checks if the GemWallet extension is installed in the user's browser."}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"We definitely recommend that you check if the user has GemWallet installed before using any of the other methods available."})}),"\n",(0,r.jsx)(n.h4,{id:"request-4",children:"Request"}),"\n",(0,r.jsx)(n.p,{children:"This function does not require any parameters."}),"\n",(0,r.jsx)(n.h4,{id:"response-4",children:"Response"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"result: {\n  isInstalled: boolean;\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isInstalled"}),": ",(0,r.jsx)(n.code,{children:"true"})," if the user has GemWallet extension installed, ",(0,r.jsx)(n.code,{children:"false"})," otherwise."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"examples-4",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { isInstalled } from "@gemwallet/api";\n\nisInstalled().then((response) => {\n  console.log(response.result.isInstalled);\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"Here is an example with a React web application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { isInstalled } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (!response.result.isInstalled) {\n        console.log("GemWallet is not installed");\n      } else {\n        console.log("GemWallet is installed");\n      }\n    });\n  };\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,r.jsx)(n.h3,{id:"sendpayment",children:"sendPayment"}),"\n",(0,r.jsx)(n.p,{children:"Initiates a payment transaction through the extension."}),"\n",(0,r.jsx)(n.h4,{id:"request-5",children:"Request"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mandatory"})," - The function takes a payload object as an input parameter, which has properties defined by ",(0,r.jsx)(n.code,{children:"SendPaymentRequest"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"amount"}),": The amount to deliver, in one of the following formats:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.em,{children:"string"})," representing the number of XRP to deliver, in drops."]}),"\n",(0,r.jsxs)(n.li,{children:["An ",(0,r.jsx)(n.em,{children:"object"})," where 'value' is a string representing the number of the token to deliver."]}),"\n",(0,r.jsxs)(n.li,{children:["More technical details about the amount formats can be found ",(0,r.jsx)(n.a,{href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts",children:"here"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"destination"}),": The unique address of the account receiving the payment."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"memos"}),": The memos to attach to the transaction. Each attribute of each memo must be hex encoded.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["More technical details about the memos can be found ",(0,r.jsx)(n.a,{href:"https://xrpl.org/transaction-common-fields.html#memos-field",children:"here"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"destinationTag"}),": The destination tag to attach to the transaction."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fee"}),": Integer amount of XRP, in drops, to be destroyed as a cost for distributing this transaction to the network.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["More technical details about the drops can be found ",(0,r.jsx)(n.a,{href:"https://xrpl.org/currency-formats.html#xrp-amounts",children:"here"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"flags"}),": Flags to set on the transaction."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export interface SendPaymentRequest {\n  // The amount to deliver, in one of the following formats:\n  // - A string representing the number of XRP to deliver, in drops.\n  // - An object where 'value' is a string representing the number of the token to deliver.\n  amount: Amount;\n  // The unique address of the account receiving the payment\n  destination: string;\n  // The memos to attach to the transaction\n  // Each attribute of each memo must be hex encoded\n  memos?: Memo[];\n  // The destination tag to attach to the transaction\n  destinationTag?: number;\n  // Integer amount of XRP, in drops, to be destroyed as a cost for distributing this transaction to the network\n  fee?: string;\n  // Flags to set on the transaction\n  flags?: PaymentFlags;\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface Amount {\n  currency: string;\n  issuer: string;\n  value: string;\n} | string;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["More details about the amount format can be found ",(0,r.jsx)(n.a,{href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts",children:"here"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface Memo {\n  memo: {\n    memoType?: string;\n    memoData?: string;\n    memoFormat?: string;\n  };\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["More technical details about the memos can be found ",(0,r.jsx)(n.a,{href:"https://xrpl.org/transaction-common-fields.html#memos-field",children:"here"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface PaymentFlags {\n  tfNoDirectRipple?: boolean;\n  tfPartialPayment?: boolean;\n  tfLimitQuality?: boolean;\n} | number;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["More details about the flags can be found ",(0,r.jsx)(n.a,{href:"https://xrpl.org/transaction-common-fields.html#flags-field",children:"here"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"response-5",children:"Response"}),"\n",(0,r.jsxs)(n.p,{children:["The response is a Promise which resolves to an object with a ",(0,r.jsx)(n.code,{children:"type"})," and ",(0,r.jsx)(n.code,{children:"result"})," property."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"}),": ",(0,r.jsx)(n.code,{children:'"response" | "reject"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"result"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hash"}),": The hash of the transaction."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'type: "response";\nresult: {\n  hash: string;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"or"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'type: "reject";\nresult: undefined;\n'})}),"\n",(0,r.jsx)(n.h4,{id:"error-handling-4",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"In case of error, the error will be thrown."}),"\n",(0,r.jsx)(n.h4,{id:"examples-5",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { sendPayment } from "@gemwallet/api";\n\nconst payload = {\n  amount: "1000000", // In drops (1 XRP)\n  destination: "rLWQskMM8EoPxaLsmuQxE5rYeP4uX7dhym",\n  memos: [\n    {\n      memo: {\n        memoType: "4465736372697074696f6e",\n        memoData: "54657374206d656d6f",\n      },\n    },\n  ],\n  destinationTag: 12,\n  fee: "199",\n  flags: {\n    tfNoDirectRipple: false,\n    tfPartialPayment: false,\n    tfLimitQuality: false,\n  },\n};\n\nsendPayment(payload).then((response) => {\n  console.log(response.result?.hash);\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"Here is an example for an XRP Payment with a React web application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { isInstalled, sendPayment } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const payment = {\n          amount: "1000000", // In drops (1 XRP)\n          destination: "rLWQskMM8EoPxaLsmuQxE5rYeP4uX7dhym",\n        };\n        sendPayment(payment).then((response) => {\n          console.log("Transaction Hash: ", response.result?.hash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,r.jsx)(n.p,{children:"Here is an example for an ETH Payment with a React web application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { isInstalled, sendPayment } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const payment = {\n          amount: {\n            currency: "ETH",\n            value: "0.01", // In currency\n            issuer: "rnm76Qgz4G9G4gZBJVuXVvkbt7gVD7szey",\n          },\n          destination: "rLWQskMM8EoPxaLsmuQxE5rYeP4uX7dhym",\n        };\n        sendPayment(payment).then((trHash) => {\n          console.log("Transaction Hash: ", trHash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,r.jsx)(n.h3,{id:"settrustline",children:"setTrustLine"}),"\n",(0,r.jsx)(n.p,{children:"Adds or edits a trustline within the wallet."}),"\n",(0,r.jsx)(n.h4,{id:"request-6",children:"Request"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mandatory"})," - The function takes a payload of type ",(0,r.jsx)(n.code,{children:"SetTrustlineRequest"})," as an input parameter."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"limitAmount"}),": The maximum amount of currency that can be exchanged to the trustline.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["More technical details about the amount formats can be found ",(0,r.jsx)(n.a,{href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts",children:"here"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fee"}),": Integer amount of XRP, in drops, to be destroyed as a cost for distributing this transaction to the network. Some transaction types have different minimum requirements.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["More technical details about the drops can be found ",(0,r.jsx)(n.a,{href:"https://xrpl.org/currency-formats.html#xrp-amounts",children:"here"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"memos"}),": The memos to attach to the transaction. Each attribute of each memo must be hex encoded.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["More technical details about the memos can be found ",(0,r.jsx)(n.a,{href:"https://xrpl.org/transaction-common-fields.html#memos-field",children:"here"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"flags"}),": Flags to set on the transaction."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface SetTrustlineRequest {\n  // The maximum amount of currency that can be exchanged to the trustline\n  limitAmount: IssuedCurrencyAmount;\n  // Integer amount of XRP, in drops, to be destroyed as a cost for distributing this transaction to the network.\n  // Some transaction types have different minimum requirements.\n  fee?: string;\n  // The memos to attach to the transaction\n  // Each attribute of each memo must be hex encoded\n  memos?: Memo[];\n  // Flags to set on the transaction\n  flags?: TrustSetFlags;\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface IssuedCurrencyAmount {\n  currency: string;\n  issuer: string;\n  value: string;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["More technical details about the currency amount formats can be found ",(0,r.jsx)(n.a,{href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts",children:"here"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface Memo {\n  memo: {\n    memoType?: string;\n    memoData?: string;\n    memoFormat?: string;\n  };\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["More technical details about the memos can be found ",(0,r.jsx)(n.a,{href:"https://xrpl.org/transaction-common-fields.html#memos-field",children:"here"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface TrustSetFlags {\n  tfSetfAuth?: boolean;\n  tfSetNoRipple?: boolean;\n  tfClearNoRipple?: boolean;\n  tfSetFreeze?: boolean;\n  tfClearFreeze?: boolean;\n} | number;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["More details about the flags can be found ",(0,r.jsx)(n.a,{href:"https://xrpl.org/transaction-common-fields.html#flags-field",children:"here"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"response-6",children:"Response"}),"\n",(0,r.jsxs)(n.p,{children:["The response is a Promise which resolves to an object with a ",(0,r.jsx)(n.code,{children:"type"})," and ",(0,r.jsx)(n.code,{children:"result"})," property."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"}),": ",(0,r.jsx)(n.code,{children:'"response" | "reject"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"result"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hash"}),": The hash of the transaction."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'type: "response";\nresult: {\n  hash: string;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"or"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'type: "reject";\nresult: undefined;\n'})}),"\n",(0,r.jsx)(n.h4,{id:"error-handling-5",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"In case of error, the error will be thrown."}),"\n",(0,r.jsx)(n.h4,{id:"examples-6",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { setTrustline } from "@gemwallet/api";\n\nconst trustline = {\n  limitAmount: {\n    currency: "ETH",\n    issuer: "rnm76Qgz4G9G4gZBJVuXVvkbt7gVD7szey",\n    value: "10000000",\n  },\n  memos: [\n    {\n      memo: {\n        memoType: "4465736372697074696f6e",\n        memoData: "54657374206d656d6f",\n      },\n    },\n  ],\n  fee: "199",\n  flags: {\n    tfClearFreeze: false,\n    tfClearNoRipple: false,\n    tfSetFreeze: true,\n    tfSetNoRipple: true,\n    tfSetfAuth: false,\n  },\n};\n\nsetTrustline(trustline).then((response) => {\n  console.log(response.result?.hash);\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"Here is an example with a React web application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { isInstalled, addTrustline } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const transaction = {\n          limitAmount: {\n            currency: "ETH",\n            issuer: "rnm76Qgz4G9G4gZBJVuXVvkbt7gVD7szey",\n            value: "10000000",\n          },\n        };\n        addTrustline(transaction).then((response) => {\n          console.log("Transaction Hash: ", response.result?.hash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,r.jsx)(n.h3,{id:"signmessage",children:"signMessage"}),"\n",(0,r.jsx)(n.p,{children:"Signs a message using the private key of the user's wallet."}),"\n",(0,r.jsx)(n.h4,{id:"request-7",children:"Request"}),"\n",(0,r.jsx)(n.p,{children:"The function takes a message string as an input parameter."}),"\n",(0,r.jsx)(n.h4,{id:"response-7",children:"Response"}),"\n",(0,r.jsxs)(n.p,{children:["The response is a Promise which resolves to an object with a ",(0,r.jsx)(n.code,{children:"type"})," and ",(0,r.jsx)(n.code,{children:"result"})," property."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"}),": ",(0,r.jsx)(n.code,{children:'"response" | "reject"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"result"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"signedMessage"}),": The signed message."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'type: "response";\nresult: {\n  signedMessage: string;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"or"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'type: "reject";\nresult: undefined;\n'})}),"\n",(0,r.jsx)(n.h4,{id:"error-handling-6",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"In case of error, the error will be thrown."}),"\n",(0,r.jsx)(n.h4,{id:"examples-7",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { signMessage } from "@gemwallet/api";\n\nconst message = "Hello, World!";\n\nsignMessage(message).then((response) => {\n  console.log(response.result?.signedMessage);\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"Here is an example with a React web application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { isInstalled, signMessage } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        signMessage("The message I want to get signed").then((response) => {\n          console.log("Signed message: ", response.result?.signedMessage);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);