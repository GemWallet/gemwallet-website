"use strict";(self.webpackChunkgemwallet_website=self.webpackChunkgemwallet_website||[]).push([[8868],{6638:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return o},default:function(){return k},frontMatter:function(){return r},metadata:function(){return d},toc:function(){return m}});var i=t(3117),l=t(102),a=(t(7294),t(4137)),s=["components"],r={id:"using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN."},o=void 0,d={unversionedId:"api/using-gemwallet-in-browser",id:"version-2.0.0/api/using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN.",source:"@site/versioned_docs/version-2.0.0/api/using-in-browser.md",sourceDirName:"api",slug:"/api/using-gemwallet-in-browser",permalink:"/docs/2.0.0/api/using-gemwallet-in-browser",draft:!1,editUrl:"https://github.com/GemWallet/gemwallet-website/blob/master/versioned_docs/version-2.0.0/api/using-in-browser.md",tags:[],version:"2.0.0",frontMatter:{id:"using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN."},sidebar:"docs",previous:{title:"GemWallet API",permalink:"/docs/2.0.0/api/gemwallet-api"},next:{title:"Using GemWallet in Node.js",permalink:"/docs/2.0.0/api/using-gemwallet-in-node-js"}},p={},m=[{value:"Importing the library",id:"importing-the-library",level:2},{value:"Methods",id:"methods",level:2},{value:"isConnected()",id:"isconnected",level:3},{value:"getAddress()",id:"getaddress",level:3},{value:"getNetwork()",id:"getnetwork",level:3},{value:"getPublicKey()",id:"getpublickey",level:3},{value:"sendPayment()",id:"sendpayment",level:3},{value:"signMessage()",id:"signmessage",level:3}],u={toc:m};function k(e){var n=e.components,t=(0,l.Z)(e,s);return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"This page assumes that you have GemWallet installed.")),(0,a.kt)("h2",{id:"importing-the-library"},"Importing the library"),(0,a.kt)("p",null,"Let's first import the library in the ",(0,a.kt)("inlineCode",{parentName:"p"},"<head>")," tag of our page."),(0,a.kt)("p",null,"Install the packaged library via script tag using cdnjs, swapping in the desired version number for {version}. You can also replace {version} with ",(0,a.kt)("inlineCode",{parentName:"p"},"master")," to get the last version (not recommended)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<head>\n  <script src="https://cdn.jsdelivr.net/gh/GemWallet/gemwallet-extension@{version}/dist/gemwallet-api.min.js"><\/script>\n</head>\n')),(0,a.kt)("p",null,"This will expose a global variable called ",(0,a.kt)("inlineCode",{parentName:"p"},"window.GemWalletApi")," that will contain our library."),(0,a.kt)("p",null,"Now let's dig into what functionalities are available to you."),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"isconnected"},"isConnected()"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"We recommend that you check if the user is connected before using any of the other methods available.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"isConnected() -> <Promise<boolean>>")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if the user has GemWallet extension installed, and ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    console.log("User has GemWallet!");\n  } else {\n    console.log("User doesn\'t have GemWallet!");\n  }\n});\n')),(0,a.kt)("h3",{id:"getaddress"},"getAddress()"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"getAddress() -> <Promise<string|null|undefined>>")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string")," returns the classic address of the wallet."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"null")," user refused to share the address within GemWallet."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"undefined")," something went wrong.")),(0,a.kt)("p",null,"Here is an example of implementation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    GemWalletApi.getAddress().then((address) => {\n      console.log(`Your address: ${address}`);\n    });\n  }\n});\n")),(0,a.kt)("h3",{id:"getnetwork"},"getNetwork()"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"getNetwork() -> <Promise<'Mainnet'|'Testnet'|'Devnet'|'NFTDevnet'>>")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Mainnet")," if the user is connected to the ",(0,a.kt)("inlineCode",{parentName:"li"},"main network"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Testnet")," if the user is connected to the ",(0,a.kt)("inlineCode",{parentName:"li"},"test network"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Devnet")," if the user is connected to the ",(0,a.kt)("inlineCode",{parentName:"li"},"developer network"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"NFTDevnet")," if the user is connected to the ",(0,a.kt)("inlineCode",{parentName:"li"},"NFT Devnet"),".")),(0,a.kt)("p",null,"Here is an example of implementation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    GemWalletApi.getNetwork().then((network) => {\n      console.log(`Your network: ${network}`);\n    });\n  }\n});\n")),(0,a.kt)("h3",{id:"getpublickey"},"getPublicKey()"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"getPublicKey() -> <Promise<{ publicKey: string, address: string }|null|undefined>>")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"{ publicKey: string, address: string }")," returns the public key and the classic address of the wallet."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"null")," user refused to share the public key within GemWallet."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"undefined")," something went wrong.")),(0,a.kt)("p",null,"Here is an example of implementation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    GemWalletApi.getPublicKey().then(({ publicKey }) => {\n      console.log(`Your public key: ${publicKey}`);\n    });\n  }\n});\n")),(0,a.kt)("h3",{id:"sendpayment"},"sendPayment()"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"sendPayment(payment) -> <Promise<string|null|undefined>>")),(0,a.kt)("p",null,"Take as parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"payment")," object")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const payment = {\n  // The amount of currency to deliver (in drops)\n  amount: string;\n  // The unique address of the account receiving the payment\n  destination: string;\n}\n")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string")," returns the hash of the transaction."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"null")," user refused the payment within GemWallet."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"undefined")," something went wrong.")),(0,a.kt)("p",null,"Here is an example of implementation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    const payment = {\n      amount: "10",\n      destination: "rLWQskMM8EoPxaLsmuQxE5rYeP4uX7dhym",\n    };\n    GemWalletApi.sendPayment(payment).then((trHash) => {\n      console.log("Transaction Hash: ", trHash);\n    });\n  }\n});\n')),(0,a.kt)("h3",{id:"signmessage"},"signMessage()"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"signMessage(message) -> <Promise<string|null|undefined>>")),(0,a.kt)("p",null,"Take as parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"message")," string")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string")," returns the signed message."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"null")," user refused the payment within GemWallet."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"undefined")," something went wrong.")),(0,a.kt)("p",null,"Here is an example of implementation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    GemWalletApi.signMessage("The message I want to get signed").then(\n      (signedMessage) => {\n        console.log("Signed message: ", signedMessage);\n      }\n    );\n  }\n});\n')))}k.isMDXComponent=!0}}]);