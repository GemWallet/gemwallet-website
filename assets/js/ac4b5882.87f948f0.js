"use strict";(self.webpackChunkgemwallet_website=self.webpackChunkgemwallet_website||[]).push([[8868],{22783:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var i=s(85893),t=s(11151);const l={id:"using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN."},r=void 0,d={id:"api/using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN.",source:"@site/versioned_docs/version-2.0.0/api/using-in-browser.md",sourceDirName:"api",slug:"/api/using-gemwallet-in-browser",permalink:"/docs/2.0.0/api/using-gemwallet-in-browser",draft:!1,unlisted:!1,editUrl:"https://github.com/GemWallet/gemwallet-website/blob/master/versioned_docs/version-2.0.0/api/using-in-browser.md",tags:[],version:"2.0.0",frontMatter:{id:"using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN."},sidebar:"docs",previous:{title:"GemWallet API",permalink:"/docs/2.0.0/api/gemwallet-api"},next:{title:"Using GemWallet in Node.js",permalink:"/docs/2.0.0/api/using-gemwallet-in-node-js"}},o={},c=[{value:"Importing the library",id:"importing-the-library",level:2},{value:"Methods",id:"methods",level:2},{value:"isConnected()",id:"isconnected",level:3},{value:"getAddress()",id:"getaddress",level:3},{value:"getNetwork()",id:"getnetwork",level:3},{value:"getPublicKey()",id:"getpublickey",level:3},{value:"sendPayment()",id:"sendpayment",level:3},{value:"signMessage()",id:"signmessage",level:3}];function a(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"This page assumes that you have GemWallet installed."})}),"\n",(0,i.jsx)(n.h2,{id:"importing-the-library",children:"Importing the library"}),"\n",(0,i.jsxs)(n.p,{children:["Let's first import the library in the ",(0,i.jsx)(n.code,{children:"<head>"})," tag of our page."]}),"\n",(0,i.jsxs)(n.p,{children:["Install the packaged library via script tag using cdnjs, swapping in the desired version number for {version}. You can also replace {version} with ",(0,i.jsx)(n.code,{children:"master"})," to get the last version (not recommended)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<head>\n  <script src="https://cdn.jsdelivr.net/gh/GemWallet/gemwallet-extension@{version}/dist/gemwallet-api.min.js"><\/script>\n</head>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This will expose a global variable called ",(0,i.jsx)(n.code,{children:"window.GemWalletApi"})," that will contain our library."]}),"\n",(0,i.jsx)(n.p,{children:"Now let's dig into what functionalities are available to you."}),"\n",(0,i.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(n.h3,{id:"isconnected",children:"isConnected()"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"We recommend that you check if the user is connected before using any of the other methods available."})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"isConnected() -> <Promise<boolean>>"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns ",(0,i.jsx)(n.code,{children:"true"})," if the user has GemWallet extension installed, and ",(0,i.jsx)(n.code,{children:"false"})," otherwise."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    console.log("User has GemWallet!");\n  } else {\n    console.log("User doesn\'t have GemWallet!");\n  }\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"getaddress",children:"getAddress()"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getAddress() -> <Promise<string|null|undefined>>"})}),"\n",(0,i.jsx)(n.p,{children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"string"})," returns the classic address of the wallet."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"null"})," user refused to share the address within GemWallet."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"undefined"})," something went wrong."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here is an example of implementation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    GemWalletApi.getAddress().then((address) => {\n      console.log(`Your address: ${address}`);\n    });\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"getnetwork",children:"getNetwork()"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getNetwork() -> <Promise<'Mainnet'|'Testnet'|'Devnet'|'NFTDevnet'>>"})}),"\n",(0,i.jsx)(n.p,{children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Mainnet"})," if the user is connected to the ",(0,i.jsx)(n.code,{children:"main network"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Testnet"})," if the user is connected to the ",(0,i.jsx)(n.code,{children:"test network"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Devnet"})," if the user is connected to the ",(0,i.jsx)(n.code,{children:"developer network"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"NFTDevnet"})," if the user is connected to the ",(0,i.jsx)(n.code,{children:"NFT Devnet"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here is an example of implementation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    GemWalletApi.getNetwork().then((network) => {\n      console.log(`Your network: ${network}`);\n    });\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"getpublickey",children:"getPublicKey()"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getPublicKey() -> <Promise<{ publicKey: string, address: string }|null|undefined>>"})}),"\n",(0,i.jsx)(n.p,{children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"{ publicKey: string, address: string }"})," returns the public key and the classic address of the wallet."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"null"})," user refused to share the public key within GemWallet."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"undefined"})," something went wrong."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here is an example of implementation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    GemWalletApi.getPublicKey().then(({ publicKey }) => {\n      console.log(`Your public key: ${publicKey}`);\n    });\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"sendpayment",children:"sendPayment()"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"sendPayment(payment) -> <Promise<string|null|undefined>>"})}),"\n",(0,i.jsx)(n.p,{children:"Take as parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"payment"})," object"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const payment = {\n  // The amount of currency to deliver (in drops)\n  amount: string;\n  // The unique address of the account receiving the payment\n  destination: string;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"string"})," returns the hash of the transaction."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"null"})," user refused the payment within GemWallet."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"undefined"})," something went wrong."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here is an example of implementation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    const payment = {\n      amount: "10",\n      destination: "rLWQskMM8EoPxaLsmuQxE5rYeP4uX7dhym",\n    };\n    GemWalletApi.sendPayment(payment).then((trHash) => {\n      console.log("Transaction Hash: ", trHash);\n    });\n  }\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"signmessage",children:"signMessage()"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"signMessage(message) -> <Promise<string|null|undefined>>"})}),"\n",(0,i.jsx)(n.p,{children:"Take as parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"message"})," string"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"string"})," returns the signed message."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"null"})," user refused the payment within GemWallet."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"undefined"})," something went wrong."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here is an example of implementation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    GemWalletApi.signMessage("The message I want to get signed").then(\n      (signedMessage) => {\n        console.log("Signed message: ", signedMessage);\n      }\n    );\n  }\n});\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);