"use strict";(self.webpackChunkgemwallet_website=self.webpackChunkgemwallet_website||[]).push([[3222],{83215:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var i=s(85893),t=s(11151);const l={id:"using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN."},r=void 0,d={id:"api/using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN.",source:"@site/versioned_docs/version-2.2.0/api/using-in-browser.md",sourceDirName:"api",slug:"/api/using-gemwallet-in-browser",permalink:"/docs/2.2.0/api/using-gemwallet-in-browser",draft:!1,unlisted:!1,editUrl:"https://github.com/GemWallet/gemwallet-website/blob/master/versioned_docs/version-2.2.0/api/using-in-browser.md",tags:[],version:"2.2.0",frontMatter:{id:"using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN."},sidebar:"docs",previous:{title:"GemWallet API",permalink:"/docs/2.2.0/api/gemwallet-api"},next:{title:"Using GemWallet in Node.js",permalink:"/docs/2.2.0/api/using-gemwallet-in-node-js"}},a={},c=[{value:"Importing the library",id:"importing-the-library",level:2},{value:"Methods",id:"methods",level:2},{value:"isConnected()",id:"isconnected",level:3},{value:"getAddress()",id:"getaddress",level:3},{value:"getNetwork()",id:"getnetwork",level:3},{value:"getNFT()",id:"getnft",level:3},{value:"getPublicKey()",id:"getpublickey",level:3},{value:"sendPayment()",id:"sendpayment",level:3},{value:"signMessage()",id:"signmessage",level:3},{value:"addTrustline()",id:"addtrustline",level:3}];function o(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"This page assumes that you have GemWallet installed."})}),"\n",(0,i.jsx)(n.h2,{id:"importing-the-library",children:"Importing the library"}),"\n",(0,i.jsxs)(n.p,{children:["Let's first import the library in the ",(0,i.jsx)(n.code,{children:"<head>"})," tag of our page."]}),"\n",(0,i.jsx)(n.p,{children:"Install the packaged library via script tag using unpkg."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<head>\n  <script src="https://unpkg.com/@gemwallet/api@2.2.0/umd/gemwallet-api.js"><\/script>\n</head>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This will expose a global variable called ",(0,i.jsx)(n.code,{children:"window.GemWalletApi"})," that will contain our library."]}),"\n",(0,i.jsx)(n.p,{children:"Now let's dig into what functionalities are available to you."}),"\n",(0,i.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(n.h3,{id:"isconnected",children:"isConnected()"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"We recommend that you check if the user is connected before using any of the other methods available."})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"isConnected() -> <Promise<boolean>>"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns ",(0,i.jsx)(n.code,{children:"true"})," if the user has GemWallet extension installed, and ",(0,i.jsx)(n.code,{children:"false"})," otherwise."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    console.log("User has GemWallet!");\n  } else {\n    console.log("User doesn\'t have GemWallet!");\n  }\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"getaddress",children:"getAddress()"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getAddress() -> <Promise<string|null|undefined>>"})}),"\n",(0,i.jsx)(n.p,{children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"string"})," returns the classic address of the wallet."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"null"})," user refused to share the address within GemWallet."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"undefined"})," something went wrong."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here is an example of implementation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    GemWalletApi.getAddress().then((address) => {\n      console.log(`Your address: ${address}`);\n    });\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"getnetwork",children:"getNetwork()"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getNetwork() -> <Promise<'Mainnet'|'Testnet'|'Devnet'|'AMM-Devnet'>>"})}),"\n",(0,i.jsx)(n.p,{children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Mainnet"})," if the user is connected to the ",(0,i.jsx)(n.code,{children:"main network"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Testnet"})," if the user is connected to the ",(0,i.jsx)(n.code,{children:"test network"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Devnet"})," if the user is connected to the ",(0,i.jsx)(n.code,{children:"developer network"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"AMM-Devnet"})," if the user is connected to the ",(0,i.jsx)(n.code,{children:"AMM Devnet"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here is an example of implementation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    GemWalletApi.getNetwork().then((network) => {\n      console.log(`Your network: ${network}`);\n    });\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"getnft",children:"getNFT()"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getNFT(optionalParameters) -> <Promise<AccountNFToken[]|null|undefined>>"})}),"\n",(0,i.jsx)(n.p,{children:"Take as parameter an optional object:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"optionalParameters"})," object"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const optionalParameters = {\n  // Limit the number of NFTokens to retrieve.\n  limit?: number;\n  // Value from a previous paginated response.\n  // Resume retrieving data where that response left off.\n  marker?: unknown;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"AccountNFToken[]"})," returns an array of owned NFTs."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"null"})," user refused to share owned NFTs within GemWallet."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"undefined"})," something went wrong."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"interface AccountNFToken {\n  Flags: number;\n  Issuer: string;\n  NFTokenID: string;\n  NFTokenTaxon: number;\n  URI?: string;\n  nft_serial: number;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Here is an example of implementation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    GemWalletApi.getNFT().then((nfts) => {\n      console.log(`Your NFTs: ${nfts}`);\n    });\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"getpublickey",children:"getPublicKey()"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"getPublicKey() -> <Promise<{ publicKey: string, address: string }|null|undefined>>"})}),"\n",(0,i.jsx)(n.p,{children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"{ publicKey: string, address: string }"})," returns the public key and the classic address of the wallet."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"null"})," user refused to share the public key within GemWallet."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"undefined"})," something went wrong."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here is an example of implementation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    GemWalletApi.getPublicKey().then(({ publicKey }) => {\n      console.log(`Your public key: ${publicKey}`);\n    });\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"sendpayment",children:"sendPayment()"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"sendPayment(payment) -> <Promise<string|null|undefined>>"})}),"\n",(0,i.jsx)(n.p,{children:"Take as parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"payment"})," object"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const payment = {\n  // \tThe amount of currency to deliver\n  amount: string;\n  // The unique address of the account receiving the payment\n  destination: string;\n  // The token that can be used\n  currency?: string;\n  // The issuer of the token\n  issuer?: string;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"string"})," returns the hash of the transaction."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"null"})," user refused the payment within GemWallet."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"undefined"})," something went wrong."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here is an example of implementation for an XRP Payment:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    const payment = {\n      amount: "10",\n      destination: "rLWQskMM8EoPxaLsmuQxE5rYeP4uX7dhym",\n    };\n    GemWalletApi.sendPayment(payment).then((trHash) => {\n      console.log("Transaction Hash: ", trHash);\n    });\n  }\n});\n'})}),"\n",(0,i.jsx)(n.p,{children:"Here is an example of implementation for an ETH Payment:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    const payment = {\n      amount: "10",\n      destination: "rLWQskMM8EoPxaLsmuQxE5rYeP4uX7dhym",\n      currency: "ETH",\n      issuer: "rnm76Qgz4G9G4gZBJVuXVvkbt7gVD7szey",\n    };\n    GemWalletApi.sendPayment(payment).then((trHash) => {\n      console.log("Transaction Hash: ", trHash);\n    });\n  }\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"signmessage",children:"signMessage()"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"signMessage(message) -> <Promise<string|null|undefined>>"})}),"\n",(0,i.jsx)(n.p,{children:"Take as parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"message"})," string"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"string"})," returns the signed message."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"null"})," user refused the payment within GemWallet."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"undefined"})," something went wrong."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here is an example of implementation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    GemWalletApi.signMessage("The message I want to get signed").then(\n      (signedMessage) => {\n        console.log("Signed message: ", signedMessage);\n      }\n    );\n  }\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"addtrustline",children:"addTrustline()"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"addTrustline(transaction) -> <Promise<string|null|undefined>>"})}),"\n",(0,i.jsx)(n.p,{children:"Take as parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"transaction"})," object"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const transaction = {\n  // The token to be used\n  currency: string;\n  // The address of the account owing the token\n  issuer: string;\n  // Integer amount of XRP, in drops, to be destroyed as a cost for distributing this transaction to the network.\n  // Some transaction types have different minimum requirements.\n  fee?: string;\n  // \tThe maximum amount of currency that can be exchanged to the trustline\n  value: string;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"string"}),": hash of the transaction"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"null"}),": user refused the payment"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"undefined"}),": something went wrong"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here is an example with a React web application:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'GemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    const transaction = {\n      currency: "USD",\n      issuer: "rwtDvu9QDfCskWuyE2TSEt3s56RbiWUKJN",\n      value: "10000000",\n    };\n    GemWalletApi.addTrustline(transaction).then((trHash) => {\n      console.log("Transaction Hash: ", trHash);\n    });\n  }\n});\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);