"use strict";(self.webpackChunkgemwallet_website=self.webpackChunkgemwallet_website||[]).push([[3573],{4137:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6361:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=n(3117),i=n(102),a=(n(7294),n(4137)),o=["components"],l={id:"using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN.",sidebar_position:2},s=void 0,c={unversionedId:"api/using-gemwallet-in-browser",id:"version-1.0.2/api/using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN.",source:"@site/versioned_docs/version-1.0.2/api/using-in-browser.md",sourceDirName:"api",slug:"/api/using-gemwallet-in-browser",permalink:"/docs/1.0.2/api/using-gemwallet-in-browser",draft:!1,editUrl:"https://github.com/GemWallet/gemwallet-website/blob/master/versioned_docs/version-1.0.2/api/using-in-browser.md",tags:[],version:"1.0.2",sidebarPosition:2,frontMatter:{id:"using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN.",sidebar_position:2},sidebar:"docs",previous:{title:"GemWallet API",permalink:"/docs/1.0.2/api/gemwallet-api"},next:{title:"Using GemWallet in Node.js",permalink:"/docs/1.0.2/api/using-gemwallet-in-node-js"}},p={},u=[{value:"Importing the library",id:"importing-the-library",level:2},{value:"Methods",id:"methods",level:2},{value:"isConnected()",id:"isconnected",level:3},{value:"getNetwork()",id:"getnetwork",level:3},{value:"transactionRequest()",id:"transactionrequest",level:3}],d={toc:u};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"This page assumes that you have GemWallet installed.")),(0,a.kt)("h2",{id:"importing-the-library"},"Importing the library"),(0,a.kt)("p",null,"Let's first import the library in the ",(0,a.kt)("inlineCode",{parentName:"p"},"<head>")," tag of our page."),(0,a.kt)("p",null,"Install the packaged library via script tag using cdnjs, swapping in the desired version number for {version}. You can also replace {version} with ",(0,a.kt)("inlineCode",{parentName:"p"},"master")," to get the last version (not recommended)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<head>\n  <script src="https://cdn.jsdelivr.net/gh/GemWallet/gemwallet-extension@{version}/dist/gemwallet-api.min.js"><\/script>\n</head>\n')),(0,a.kt)("p",null,"This will expose a global variable called ",(0,a.kt)("inlineCode",{parentName:"p"},"window.gemWalletApi")," that will contain our library."),(0,a.kt)("p",null,"Now let's dig into what functionalities are available to you."),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"isconnected"},"isConnected()"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"We recommend that you check if the user is connected before using any of the other methods available.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"isConnected() -> <Promise<boolean>>")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if the user has GemWallet extension installed, and ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'gemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    console.log("User has GemWallet!");\n  } else {\n    console.log("User doesn\'t have GemWallet!");\n  }\n});\n')),(0,a.kt)("h3",{id:"getnetwork"},"getNetwork()"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"getNetwork() -> <Promise<'TEST'|'MAIN'>>")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"TEST")," if the user is connected to the ",(0,a.kt)("inlineCode",{parentName:"p"},"test network"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"MAIN")," if connected to the ",(0,a.kt)("inlineCode",{parentName:"p"},"main network"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"gemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    gemWalletApi.getNetwork().then((network) => {\n      console.log(`NETWORK: ${network}`);\n    });\n  }\n});\n")),(0,a.kt)("h3",{id:"transactionrequest"},"transactionRequest()"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"transactionRequest() -> <Promise<'waiting'|'pending'|'success'|'rejected'>>")),(0,a.kt)("p",null,"Transaction can have 4 stages:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"waiting"),": waiting for a user interaction"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pending"),": transaction is pending to be a success or rejected (in progress)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"success"),": transaction has been successful"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rejected"),": transaction has been rejected")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'gemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    const transaction = {\n      chain: "xrp",\n      network: "TEST",\n      transaction: "payment",\n      amount: "50",\n      destination: "rMrXopFSnCDSd5Eej4TpeHrV7SPjKtLpo2",\n      token: "xrp",\n      apiVersion: 1,\n    };\n    gemWalletApi.transactionRequest(transaction).then((status) => {\n      console.log(`TRANSACTION STATUS: ${status}`);\n    });\n  }\n});\n')))}m.isMDXComponent=!0}}]);