"use strict";(self.webpackChunkgemwallet_website=self.webpackChunkgemwallet_website||[]).push([[1580],{9754:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return m}});var a=t(3117),l=t(102),r=(t(7294),t(4137)),s=["components"],i={id:"gemwallet-api-reference",title:"Reference",description:"Provides the documentation on how to use GemWallet API."},o="Reference",p={unversionedId:"api/gemwallet-api-reference",id:"api/gemwallet-api-reference",title:"Reference",description:"Provides the documentation on how to use GemWallet API.",source:"@site/docs/api/reference.md",sourceDirName:"api",slug:"/api/gemwallet-api-reference",permalink:"/docs/next/api/gemwallet-api-reference",draft:!1,editUrl:"https://github.com/GemWallet/gemwallet-website/blob/master/docs/api/reference.md",tags:[],version:"current",frontMatter:{id:"gemwallet-api-reference",title:"Reference",description:"Provides the documentation on how to use GemWallet API."},sidebar:"docs",previous:{title:"Installation",permalink:"/docs/next/api/gemwallet-api-installation"},next:{title:"acceptNFTOffer",permalink:"/docs/next/playground/acceptNFTOffer"}},u={},m=[{value:"Regular methods",id:"regular-methods",level:2},{value:"acceptNFTOffer",id:"acceptnftoffer",level:3},{value:"Request",id:"request",level:4},{value:"Response",id:"response",level:4},{value:"Error Handling",id:"error-handling",level:4},{value:"Examples",id:"examples",level:4},{value:"burnNFT",id:"burnnft",level:3},{value:"Request",id:"request-1",level:4},{value:"Response",id:"response-1",level:4},{value:"Error Handling",id:"error-handling-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"cancelNFTOffer",id:"cancelnftoffer",level:3},{value:"Request",id:"request-2",level:4},{value:"Response",id:"response-2",level:4},{value:"Error Handling",id:"error-handling-2",level:4},{value:"Examples",id:"examples-2",level:4},{value:"cancelOffer",id:"canceloffer",level:3},{value:"Request",id:"request-3",level:4},{value:"Response",id:"response-3",level:4},{value:"Error Handling",id:"error-handling-3",level:4},{value:"Examples",id:"examples-3",level:4},{value:"createNFTOffer",id:"createnftoffer",level:3},{value:"Request",id:"request-4",level:4},{value:"Response",id:"response-4",level:4},{value:"Error Handling",id:"error-handling-4",level:4},{value:"Examples",id:"examples-4",level:4},{value:"createOffer",id:"createoffer",level:3},{value:"Request",id:"request-5",level:4},{value:"Response",id:"response-5",level:4},{value:"Error Handling",id:"error-handling-5",level:4},{value:"Examples",id:"examples-5",level:4},{value:"getAddress",id:"getaddress",level:3},{value:"Request",id:"request-6",level:4},{value:"Response",id:"response-6",level:4},{value:"Error Handling",id:"error-handling-6",level:4},{value:"Examples",id:"examples-6",level:4},{value:"getNetwork",id:"getnetwork",level:3},{value:"Request",id:"request-7",level:4},{value:"Response",id:"response-7",level:4},{value:"Error Handling",id:"error-handling-7",level:4},{value:"Examples",id:"examples-7",level:4},{value:"getNFT",id:"getnft",level:3},{value:"Request",id:"request-8",level:4},{value:"Response",id:"response-8",level:4},{value:"Error Handling",id:"error-handling-8",level:4},{value:"Examples",id:"examples-8",level:4},{value:"getPublicKey",id:"getpublickey",level:3},{value:"Request",id:"request-9",level:4},{value:"Response",id:"response-9",level:4},{value:"Error Handling",id:"error-handling-9",level:4},{value:"Examples",id:"examples-9",level:4},{value:"isInstalled",id:"isinstalled",level:3},{value:"Request",id:"request-10",level:4},{value:"Response",id:"response-10",level:4},{value:"Examples",id:"examples-10",level:4},{value:"mintNFT",id:"mintnft",level:3},{value:"Request",id:"request-11",level:4},{value:"Response",id:"response-11",level:4},{value:"Error Handling",id:"error-handling-10",level:4},{value:"Examples",id:"examples-11",level:4},{value:"sendPayment",id:"sendpayment",level:3},{value:"Request",id:"request-12",level:4},{value:"Response",id:"response-12",level:4},{value:"Error Handling",id:"error-handling-11",level:4},{value:"Examples",id:"examples-12",level:4},{value:"setAccount",id:"setaccount",level:3},{value:"Request",id:"request-13",level:4},{value:"Response",id:"response-13",level:4},{value:"Error Handling",id:"error-handling-12",level:4},{value:"Examples",id:"examples-13",level:4},{value:"setTrustLine",id:"settrustline",level:3},{value:"Request",id:"request-14",level:4},{value:"Response",id:"response-14",level:4},{value:"Error Handling",id:"error-handling-13",level:4},{value:"Examples",id:"examples-14",level:4},{value:"signMessage",id:"signmessage",level:3},{value:"Request",id:"request-15",level:4},{value:"Response",id:"response-15",level:4},{value:"Error Handling",id:"error-handling-14",level:4},{value:"Examples",id:"examples-15",level:4},{value:"XRPL Protocol methods",id:"xrpl-protocol-methods",level:2},{value:"submitTransaction",id:"submittransaction",level:3},{value:"Request",id:"request-16",level:4},{value:"Response",id:"response-16",level:4},{value:"Error Handling",id:"error-handling-15",level:4},{value:"Examples",id:"examples-16",level:4},{value:"Events",id:"events",level:2},{value:"login",id:"login",level:3},{value:"Response",id:"response-17",level:4},{value:"Examples",id:"examples-17",level:4},{value:"logout",id:"logout",level:3},{value:"Response",id:"response-18",level:4},{value:"Examples",id:"examples-18",level:4},{value:"networkChanged",id:"networkchanged",level:3},{value:"Response",id:"response-19",level:4},{value:"Examples",id:"examples-19",level:4},{value:"walletChanged",id:"walletchanged",level:3},{value:"Response",id:"response-20",level:4},{value:"Examples",id:"examples-20",level:4},{value:"Other",id:"other",level:2},{value:"BaseTransactionRequest",id:"basetransactionrequest",level:3}],c={toc:m};function d(e){var n=e.components,t=(0,l.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"reference"},"Reference"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Notes"),":  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The regular methods take payloads objects as input parameters, which are documented for each method. These methods are designed to be easy to use and understand. "),(0,r.kt)("li",{parentName:"ul"},"However, if you are already familiar with the XRPL protocol convention, you can use the methods documented in the ",(0,r.kt)("a",{parentName:"li",href:"#xrpl-protocol-methods"},"XRPL Protocol methods")," section. These methods will directly take transaction payloads as defined in the ",(0,r.kt)("a",{parentName:"li",href:"https://xrpl.org/transaction-common-fields.html#transaction-common-fields"},"XRPL Protocol"),".")),(0,r.kt)("h2",{id:"regular-methods"},"Regular methods"),(0,r.kt)("h3",{id:"acceptnftoffer"},"acceptNFTOffer"),(0,r.kt)("p",null,"Accepts an existing offer for a Non-Fungible Token (NFT) through the extension."),(0,r.kt)("h4",{id:"request"},"Request"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mandatory")," - The function takes a payload of type ",(0,r.kt)("inlineCode",{parentName:"p"},"AcceptNFTOfferRequest")," as an input parameter."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All the fields from ",(0,r.kt)("inlineCode",{parentName:"li"},"BaseTransactionRequest"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"See ",(0,r.kt)("a",{parentName:"li",href:"#basetransactionrequest"},"BaseTransactionRequest")," for more details."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NFTokenSellOffer"),": Identifies the NFTokenOffer that offers to sell the NFToken."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NFTokenBuyOffer"),": Identifies the NFTokenOffer that offers to buy the NFToken."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NFTokenBrokerFee"),":\nThis field is only valid in brokered mode, and specifies the amount that the broker keeps as part of their fee for bringing the two offers together; the remaining amount is sent to the seller of the NFToken being bought. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If specified, the fee must be such that, before applying the transfer fee, the amount that the seller would receive is at least as much as the amount indicated in the sell offer."),(0,r.kt)("li",{parentName:"ul"},"Specified in one of the following formats:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("em",{parentName:"li"},"string")," representing the number of XRP to deliver, in drops."),(0,r.kt)("li",{parentName:"ul"},"An ",(0,r.kt)("em",{parentName:"li"},"object")," where 'value' is a string representing the number of the token to deliver."),(0,r.kt)("li",{parentName:"ul"},"More technical details about the amount formats can be found ",(0,r.kt)("a",{parentName:"li",href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts"},"here"),".")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface AcceptNFTOfferRequest extends BaseTransactionRequest {\n  // Identifies the NFTokenOffer that offers to sell the NFToken.\n  NFTokenSellOffer?: string;\n  // Identifies the NFTokenOffer that offers to buy the NFToken.\n  NFTokenBuyOffer?: string;\n  // This field is only valid in brokered mode, and specifies the amount that the broker keeps as part of their fee for\n  // bringing the two offers together; the remaining amount is sent to the seller of the NFToken being bought.\n  // If specified, the fee must be such that, before applying the transfer fee, the amount that the seller would receive\n  // is at least as much as the amount indicated in the sell offer.\n  NFTokenBrokerFee?: Amount;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type Amount = {\n  currency: string;\n  issuer: string;\n  value: string;\n} | string;\n")),(0,r.kt)("p",null,"More details about the amount format can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts"},"here"),"."),(0,r.kt)("h4",{id:"response"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hash"),": The hash of the transaction.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  hash: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { acceptNFTOffer } from "@gemwallet/api";\n\nconst payload = {\n  NFTokenSellOffer: "Replace me!",\n  fee: "199",\n  memos: [\n    {\n      memo: {\n        memoType: "4465736372697074696f6e",\n        memoData: "54657374206d656d6f"\n      }\n    }\n  ]\n};\n\nacceptNFTOffer(payload).then((response) => {\n  console.log("Transaction Hash: ", response.result?.hash);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, acceptNFTOffer } from "@gemwallet/api";\n\nfunction App() {\n  const handleAcceptOffer = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const payload = {\n          NFTokenSellOffer: "Replace me!",\n          fee: "199",\n          memos: [\n            {\n              memo: {\n                memoType: "4465736372697074696f6e",\n                memoData: "54657374206d656d6f"\n              }\n            }\n          ]\n        };\n        acceptNFTOffer(payload).then((response) => {\n          console.log("Transaction Hash: ", response.result?.hash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleAcceptOffer}>Accept NFT Offer</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"burnnft"},"burnNFT"),(0,r.kt)("p",null,"Burns a Non-Fungible Token (NFT) through the extension."),(0,r.kt)("h4",{id:"request-1"},"Request"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mandatory")," - The function takes a payload of type ",(0,r.kt)("inlineCode",{parentName:"p"},"BurnNFTRequest")," as an input parameter."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All the fields from ",(0,r.kt)("inlineCode",{parentName:"li"},"BaseTransactionRequest"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"See ",(0,r.kt)("a",{parentName:"li",href:"#basetransactionrequest"},"BaseTransactionRequest")," for more details."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NFTokenID"),": The NFToken to be removed by this transaction."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"owner"),": The owner of the NFToken to burn. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Only used if that owner is different than the account sending this transaction."),(0,r.kt)("li",{parentName:"ul"},"The issuer or authorized minter can use this field to burn NFTs that have the lsfBurnable flag enabled.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface BurnNFTRequest extends BaseTransactionRequest {\n  // The NFToken to be removed by this transaction.\n  NFTokenID: string;\n  // The owner of the NFToken to burn. Only used if that owner is different than the account sending this transaction.\n  // The issuer or authorized minter can use this field to burn NFTs that have the lsfBurnable flag enabled.\n  owner?: string;\n}\n")),(0,r.kt)("h4",{id:"response-1"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hash"),": The hash of the transaction.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  hash: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-1"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-1"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { burnNFT } from "@gemwallet/api";\n\nconst payload = {\n  NFTokenID: "Replace me!",\n  fee: "199",\n  memos: [\n    {\n      memo: {\n        memoType: "4465736372697074696f6e",\n        memoData: "54657374206d656d6f"\n      }\n    }\n  ]\n};\n\nburnNFT(payload).then((response) => {\n  console.log("Transaction Hash: ", response.result?.hash);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, burnNFT } from "@gemwallet/api";\n\nfunction App() {\n  const handleBurnNFT = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const payload = {\n          NFTokenID: "Replace me!",\n          fee: "199",\n          memos: [\n            {\n              memo: {\n                memoType: "4465736372697074696f6e",\n                memoData: "54657374206d656d6f"\n              }\n            }\n          ]\n        };\n        burnNFT(payload).then((response) => {\n          console.log("Transaction Hash: ", response.result?.hash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleBurnNFT}>Burn NFT</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"cancelnftoffer"},"cancelNFTOffer"),(0,r.kt)("p",null,"Cancels an existing offer for a Non-Fungible Token (NFT) through the extension."),(0,r.kt)("h4",{id:"request-2"},"Request"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mandatory")," - The function takes a payload of type ",(0,r.kt)("inlineCode",{parentName:"p"},"CancelNFTOfferRequest")," as an input parameter."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All the fields from ",(0,r.kt)("inlineCode",{parentName:"li"},"BaseTransactionRequest"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"See ",(0,r.kt)("a",{parentName:"li",href:"#basetransactionrequest"},"BaseTransactionRequest")," for more details."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NFTokenOffers"),": An array of IDs of the NFTokenOffer objects to cancel. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Each entry must be a different object ID of an NFTokenOffer object; the transaction is invalid if the array contains duplicate entries.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface CancelNFTOfferRequest extends BaseTransactionRequest {\n  // An array of IDs of the NFTokenOffer objects to cancel (not the IDs of NFToken objects, but the IDs of the\n  // NFTokenOffer objects). Each entry must be a different object ID of an NFTokenOffer object; the transaction is\n  // invalid if the array contains duplicate entries.\n  NFTokenOffers: string[];\n}\n")),(0,r.kt)("h4",{id:"response-2"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hash"),": The hash of the transaction.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  hash: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-2"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-2"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { cancelNFTOffer } from "@gemwallet/api";\n\nconst payload = {\n  NFTokenOffers: ["Replace me!"],\n  fee: "199",\n  memos: [\n    {\n      memo: {\n        memoType: "4465736372697074696f6e",\n        memoData: "54657374206d656d6f"\n      }\n    }\n  ]\n};\n\ncancelNFTOffer(payload).then((response) => {\n  console.log("Transaction Hash: ", response.result?.hash);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, cancelNFTOffer } from "@gemwallet/api";\n\nfunction App() {\n  const handleCancelNFTOffer = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const payload = {\n          NFTokenOffers: ["Replace me!"],\n          fee: "199",\n          memos: [\n            {\n              memo: {\n                memoType: "4465736372697074696f6e",\n                memoData: "54657374206d656d6f"\n              }\n            }\n          ]\n        };\n        cancelNFTOffer(payload).then((response) => {\n          console.log("Transaction Hash: ", response.result?.hash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleCancelNFTOffer}>Cancel NFT Offer!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"canceloffer"},"cancelOffer"),(0,r.kt)("p",null,"Cancels an existing offer through the extension."),(0,r.kt)("h4",{id:"request-3"},"Request"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mandatory")," - The function takes a payload of type ",(0,r.kt)("inlineCode",{parentName:"p"},"CancelOfferRequest")," as an input parameter."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All the fields from ",(0,r.kt)("inlineCode",{parentName:"li"},"BaseTransactionRequest"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"See ",(0,r.kt)("a",{parentName:"li",href:"#basetransactionrequest"},"BaseTransactionRequest")," for more details."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"offerSequence"),": The sequence number (or Ticket number) of a previous OfferCreate transaction. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If specified, cancel any offer object in the ledger that was created by that transaction. "),(0,r.kt)("li",{parentName:"ul"},"It is not considered an error if the offer specified does not exist.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface CancelOfferRequest extends BaseTransactionRequest {\n  // The sequence number (or Ticket number) of a previous OfferCreate transaction. If specified, cancel any offer object\n  // in the ledger that was created by that transaction. It is not considered an error if the offer specified does not\n  // exist.\n  offerSequence: number;\n}\n")),(0,r.kt)("h4",{id:"response-3"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hash"),": The hash of the transaction.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  hash: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-3"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-3"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { cancelOffer } from "@gemwallet/api";\n\nconst payload = {\n  offerSequence: 0, // Replace me!\n  fee: "199",\n  memos: [\n    {\n      memo: {\n        memoType: "4465736372697074696f6e",\n        memoData: "54657374206d656d6f"\n      }\n    }\n  ]\n};\n\ncancelOffer(payload).then((response) => {\n  console.log("Transaction Hash: ", response.result?.hash);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, cancelOffer } from "@gemwallet/api";\n\nfunction App() {\n  const handleCancelOffer = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const payload = {\n          offerSequence: 0, // Replace me!\n          fee: "199",\n          memos: [\n            {\n              memo: {\n                memoType: "4465736372697074696f6e",\n                memoData: "54657374206d656d6f"\n              }\n            }\n          ]\n        };\n        cancelOffer(payload).then((response) => {\n          console.log("Transaction Hash: ", response.result?.hash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleCancelOffer}>Cancel Offer</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"createnftoffer"},"createNFTOffer"),(0,r.kt)("p",null,"Creates a new offer for a Non-Fungible Token (NFT) through the extension."),(0,r.kt)("h4",{id:"request-4"},"Request"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mandatory")," - The function takes a payload of type ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateNFTOfferRequest")," as an input parameter."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All the fields from ",(0,r.kt)("inlineCode",{parentName:"li"},"BaseTransactionRequest"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"See ",(0,r.kt)("a",{parentName:"li",href:"#basetransactionrequest"},"BaseTransactionRequest")," for more details."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NFTokenID"),": Identifies the NFTokenID of the NFToken object that the offer references."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount"),": Indicates the amount expected or offered for the Token.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The amount must be non-zero, except when this is a sell offer and the asset is XRP. This would indicate that the current owner of the token is giving it away free, either to anyone at all, or to the account identified by the Destination field."),(0,r.kt)("li",{parentName:"ul"},"Specified in one of the following formats:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("em",{parentName:"li"},"string")," representing the number of XRP to deliver, in drops."),(0,r.kt)("li",{parentName:"ul"},"An ",(0,r.kt)("em",{parentName:"li"},"object")," where 'value' is a string representing the number of the token to deliver."),(0,r.kt)("li",{parentName:"ul"},"More technical details about the amount formats can be found ",(0,r.kt)("a",{parentName:"li",href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts"},"here"),"."))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"owner"),": Indicates the AccountID of the account that owns the corresponding NFToken. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If the offer is to buy a token, this field must be present and it must be different than Account (since an offer to buy a token one already holds is meaningless). "),(0,r.kt)("li",{parentName:"ul"},"If the offer is to sell a token, this field must not be present, as the owner is, implicitly, the same as Account (since an offer to sell a token one doesn't already hold is meaningless)."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expiration"),": Indicates the time after which the offer will no longer be valid. The value is the number of seconds since the Ripple Epoch."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"destination"),": If present, indicates that this offer may only be accepted by the specified account. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Attempts by other accounts to accept this offer MUST fail."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"flags"),": Flags to set on the transaction.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface CreateNFTOfferRequest extends BaseTransactionRequest {\n  // Identifies the NFTokenID of the NFToken object that the offer references.\n  NFTokenID: string;\n  // Indicates the amount expected or offered for the Token.\n  // The amount must be non-zero, except when this is a sell offer and the asset is XRP. This would indicate that the\n  // current owner of the token is giving it away free, either to anyone at all, or to the account identified by the\n  // Destination field.\n  amount: Amount;\n  // Indicates the AccountID of the account that owns the corresponding NFToken.\n  // If the offer is to buy a token, this field must be present and it must be different than Account (since an offer\n  // to buy a token one already holds is meaningless).\n  // If the offer is to sell a token, this field must not be present, as the owner is, implicitly, the same as Account\n  // (since an offer to sell a token one doesn't already hold is meaningless).\n  owner?: string;\n  // Indicates the time after which the offer will no longer be valid. The value is the number of seconds since the\n  // Ripple Epoch.\n  expiration?: number;\n  // If present, indicates that this offer may only be accepted by the specified account. Attempts by other accounts to\n  // accept this offer MUST fail.\n  destination?: string;\n  flags?: CreateNFTOfferFlags;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type CreateNFTOfferFlags = {\n  tfSellNFToken?: boolean;\n} | number;\n")),(0,r.kt)("p",null,"More details about the flags can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/transaction-common-fields.html#flags-field"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type Amount = {\n  currency: string;\n  issuer: string;\n  value: string;\n} | string;\n")),(0,r.kt)("p",null,"More details about the amount format can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts"},"here"),"."),(0,r.kt)("h4",{id:"response-4"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hash"),": The hash of the transaction.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  hash: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-4"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-4"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { createNFTOffer } from "@gemwallet/api";\n\nconst payload = {\n  NFTokenID: "Replace me!",\n  amount: 50000000, // 50 XRP\n  fee: "199",\n  flags: {\n    tfSellNFToken: true // If enabled, indicates that the offer is a sell offer. Otherwise, it is a buy offer.\n  },\n  memos: [\n    {\n      memo: {\n        memoType: "4465736372697074696f6e",\n        memoData: "54657374206d656d6f"\n      }\n    }\n  ]\n};\n\ncreateNFTOffer(payload).then((response) => {\n  console.log("Transaction Hash: ", response.result?.hash);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, createNFTOffer } from "@gemwallet/api";\n\nfunction App() {\n  const handleCreateNFTOffer = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const payload = {\n          NFTokenID: "Replace me!",\n          amount: 50000000, // 50 XRP\n          fee: "199",\n          flags: {\n            tfSellNFToken: true // If enabled, indicates that the offer is a sell offer. Otherwise, it is a buy offer.\n          },\n          memos: [\n            {\n              memo: {\n                memoType: "4465736372697074696f6e",\n                memoData: "54657374206d656d6f"\n              }\n            }\n          ]\n        };\n        createNFTOffer(payload).then((response) => {\n          console.log("Transaction Hash: ", response.result?.hash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleCreateNFTOffer}>Create NFT Offer!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"createoffer"},"createOffer"),(0,r.kt)("p",null,"Creates a new offer through the extension."),(0,r.kt)("h4",{id:"request-5"},"Request"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mandatory")," - The function takes a payload of type ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateOfferRequest")," as an input parameter."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All the fields from ",(0,r.kt)("inlineCode",{parentName:"li"},"BaseTransactionRequest"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"See ",(0,r.kt)("a",{parentName:"li",href:"#basetransactionrequest"},"BaseTransactionRequest")," for more details."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"flags"),": Flags to set on the transaction."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expiration"),": Time after which the Offer is no longer active, in seconds since the Ripple Epoch."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"offerSequence"),": An Offer to delete first, specified in the same way as OfferCancel."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"takerGets"),": The amount and type of currency being sold, in one of the following formats:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("em",{parentName:"li"},"string")," representing the number of XRP to deliver, in drops."),(0,r.kt)("li",{parentName:"ul"},"An ",(0,r.kt)("em",{parentName:"li"},"object")," where 'value' is a string representing the number of the token to deliver."),(0,r.kt)("li",{parentName:"ul"},"More technical details about the amount formats can be found ",(0,r.kt)("a",{parentName:"li",href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts"},"here"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"takerPays"),": The amount and type of currency being bought, in one of the following formats:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("em",{parentName:"li"},"string")," representing the number of XRP to deliver, in drops."),(0,r.kt)("li",{parentName:"ul"},"An ",(0,r.kt)("em",{parentName:"li"},"object")," where 'value' is a string representing the number of the token to deliver."),(0,r.kt)("li",{parentName:"ul"},"More technical details about the amount formats can be found ",(0,r.kt)("a",{parentName:"li",href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts"},"here"),".")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface CreateOfferRequest extends BaseTransactionRequest {\n  flags?: CreateOfferFlags;\n  // Time after which the Offer is no longer active, in seconds since the Ripple Epoch.\n  expiration?: number;\n  // An Offer to delete first, specified in the same way as OfferCancel.\n  offerSequence?: number;\n  // The amount and type of currency being sold.\n  takerGets: Amount;\n  // The amount and type of currency being bought.\n  takerPays: Amount;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type OfferCreateFlagsInterface = {\n    tfPassive?: boolean;\n    tfImmediateOrCancel?: boolean;\n    tfFillOrKill?: boolean;\n    tfSell?: boolean;\n} | number;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type Amount = {\n  currency: string;\n  issuer: string;\n  value: string;\n} | string;\n")),(0,r.kt)("p",null,"More details about the amount format can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts"},"here"),"."),(0,r.kt)("h4",{id:"response-5"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hash"),": The hash of the transaction.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  hash: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-5"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-5"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { createOffer } from "@gemwallet/api";\n\nconst payload = {\n  takerGets: "10000000", // 10 XRP\n  takerPays: {\n    currency: "ETH",\n    issuer: "rnm76Qgz4G9G4gZBJVuXVvkbt7gVD7szey",\n    value: "0.1"\n  },\n  flags: {\n    tfPassive: true\n  },\n  fee: "199",\n  memos: [\n    {\n      memo: {\n        memoType: "4465736372697074696f6e",\n        memoData: "54657374206d656d6f"\n      }\n    }\n  ]\n};\n\ncreateOffer(payload).then((response) => {\n  console.log("Transaction Hash: ", response.result?.hash);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, createOffer } from "@gemwallet/api";\n\nfunction App() {\n  const handleCreateOffer = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const payload = {\n          takerGets: "10000000", // 10 XRP\n          takerPays: {\n            currency: "ETH",\n            issuer: "rnm76Qgz4G9G4gZBJVuXVvkbt7gVD7szey",\n            value: "0.1"\n          },\n          flags: {\n            tfPassive: true\n          },\n          fee: "199",\n          memos: [\n            {\n              memo: {\n                memoType: "4465736372697074696f6e",\n                memoData: "54657374206d656d6f"\n              }\n            }\n          ]\n        };\n        createOffer(payload).then((response) => {\n          console.log("Transaction Hash: ", response.result?.hash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleCreateOffer}>Create Offer</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"getaddress"},"getAddress"),(0,r.kt)("p",null,"Retrieves the wallet address associated with the extension."),(0,r.kt)("h4",{id:"request-6"},"Request"),(0,r.kt)("p",null,"This function does not require any parameters."),(0,r.kt)("h4",{id:"response-6"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"address"),": The classic address of the wallet.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  address: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-6"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-6"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { getAddress } from "@gemwallet/api";\n\ngetAddress().then((response) => {\n  console.log(response.result?.address);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, getAddress } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        getAddress().then((response) => {\n          console.log(`Your address: ${response.result?.address}`);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"getnetwork"},"getNetwork"),(0,r.kt)("p",null,"Retrieves the network associated with the extension."),(0,r.kt)("h4",{id:"request-7"},"Request"),(0,r.kt)("p",null,"This function does not require any parameters."),(0,r.kt)("h4",{id:"response-7"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"network"),": The network name as a string.")))),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Mainnet")," if the user is connected to the ",(0,r.kt)("inlineCode",{parentName:"li"},"main network"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Testnet")," if the user is connected to the ",(0,r.kt)("inlineCode",{parentName:"li"},"test network"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Devnet")," if the user is connected to the ",(0,r.kt)("inlineCode",{parentName:"li"},"developer network"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AMM-Devnet")," if the user is connected to the ",(0,r.kt)("inlineCode",{parentName:"li"},"AMM Devnet"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  network: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-7"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-7"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { getNetwork } from "@gemwallet/api";\n\ngetNetwork().then((response) => {\n  console.log(response.result?.network);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, getNetwork } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        getNetwork().then((response) => {\n          console.log(`Your network: ${response.result?.network}`);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"getnft"},"getNFT"),(0,r.kt)("p",null,"Retrieves NFTs associated with the wallet."),(0,r.kt)("h4",{id:"request-8"},"Request"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Optional")," - This function requires an optional payload parameter which has properties defined by ",(0,r.kt)("inlineCode",{parentName:"p"},"GetNFTRequest"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"limit"),": The maximum number of NFTs to return."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marker"),": A value from a previous paginated response. This is used to resume retrieving data where the previous response left off.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface GetNFTRequest {\n  // Limit the number of NFTokens to retrieve.\n  limit?: number;\n  // Value from a previous paginated response. Resume retrieving data where that response left off.\n  marker?: unknown;\n}\n")),(0,r.kt)("h4",{id:"response-8"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"account_nfts"),": AccountNFToken[] - An array of NFTs associated with the wallet."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"marker"),": A value to be used as a marker in a subsequent request.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  account_nfts: AccountNFToken[];\n  marker: unknown;\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface AccountNFToken {\n  Flags: number;\n  Issuer: string;\n  NFTokenID: string;\n  NFTokenTaxon: number;\n  URI?: string;\n  nft_serial: number;\n}\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-8"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-8"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { getNFT } from "@gemwallet/api";\n\ngetNFT({ limit: 10 }).then((response) => {\n  console.log(response.result?.account_nfts);\n});\n')),(0,r.kt)("p",null,"Here is an example of implementation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, getNFT } from "@gemwallet/api";\n\nfunction App() {\n  const handleNFTs = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        getNFT().then((result) => {\n          console.log("Your NFTs: ", result.result?.account_nfts);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleNFTs}>Show my NFTs!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"getpublickey"},"getPublicKey"),(0,r.kt)("p",null,"Retrieves the public key associated with the wallet."),(0,r.kt)("h4",{id:"request-9"},"Request"),(0,r.kt)("p",null,"This function does not require any parameters."),(0,r.kt)("h4",{id:"response-9"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"address"),": Classic address of the wallet."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"publicKey"),": Public key of the wallet.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  address: string;\n  publicKey: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-9"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-9"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { getPublicKey } from "@gemwallet/api";\n\ngetPublicKey().then((response) => {\n  console.log(`${response.result?.address} - ${response.result?.publicKey}`);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, getPublicKey } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        getPublicKey().then((response) => {\n          console.log(\n            `${response.result?.address} - ${response.result?.publicKey}`\n          );\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"isinstalled"},"isInstalled"),(0,r.kt)("p",null,"Checks if the GemWallet extension is installed in the user's browser."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"We definitely recommend that you check if the user has GemWallet installed before using any of the other methods available.")),(0,r.kt)("h4",{id:"request-10"},"Request"),(0,r.kt)("p",null,"This function does not require any parameters."),(0,r.kt)("h4",{id:"response-10"},"Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"result: {\n  isInstalled: boolean;\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isInstalled"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," if the user has GemWallet extension installed, ",(0,r.kt)("inlineCode",{parentName:"li"},"false")," otherwise.")),(0,r.kt)("h4",{id:"examples-10"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled } from "@gemwallet/api";\n\nisInstalled().then((response) => {\n  console.log(response.result.isInstalled);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (!response.result.isInstalled) {\n        console.log("GemWallet is not installed");\n      } else {\n        console.log("GemWallet is installed");\n      }\n    });\n  };\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"mintnft"},"mintNFT"),(0,r.kt)("p",null,"Mints a new Non-Fungible Token (NFT) through the extension."),(0,r.kt)("h4",{id:"request-11"},"Request"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mandatory")," - The function takes a payload of type ",(0,r.kt)("inlineCode",{parentName:"p"},"MintNFTRequest")," as an input parameter."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All the fields from ",(0,r.kt)("inlineCode",{parentName:"li"},"BaseTransactionRequest"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"See ",(0,r.kt)("a",{parentName:"li",href:"#basetransactionrequest"},"BaseTransactionRequest")," for more details."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"flags"),": Flags to be set on the transaction."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"issuer"),": Indicates the issuer of the token. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Should only be specified if the account executing the transaction is not the Issuer of the token, e.g. when minting on behalf of another account."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NFTokenTaxon"),": Indicates the taxon associated with this token. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The taxon is generally a value chosen by the minter of the token and a given taxon may be used for multiple tokens. "),(0,r.kt)("li",{parentName:"ul"},"The implementation reserves taxon identifiers greater than or equal to 2147483648 (0x80000000). "),(0,r.kt)("li",{parentName:"ul"},"If you have no use for this field, set it to 0."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"transferFee"),": Specifies the fee charged by the issuer for secondary sales of the Token, if such sales are allowed. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Valid values for this field are between 0 and 50000 inclusive, allowing transfer rates between 0.000% and 50.000% in increments of 0.001%. "),(0,r.kt)("li",{parentName:"ul"},"This field must NOT be present if the tfTransferable flag is not set."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"URI"),": URI that points to the data and/or metadata associated with the NFT. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'This field need not be an HTTP or HTTPS URL; it could be an IPFS URI, a magnet link, immediate data encoded as an RFC2379 "data" URL, or even an opaque issuer-specific encoding. '),(0,r.kt)("li",{parentName:"ul"},"The URI is NOT checked for validity, but the field is limited to a maximum length of 256 bytes. "),(0,r.kt)("li",{parentName:"ul"},"This field must be hex-encoded.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'interface MintNFTRequest extends BaseTransactionRequest {\n  flags?: MintNFTFlags;\n  // Indicates the issuer of the token.\n  // Should only be specified if the account executing the transaction is not the Issuer of the token, e.g. when minting on behalf of another account.\n  issuer?: string;\n  // Indicates the taxon associated with this token. The taxon is generally a value chosen by the minter of the token\n  // and a given taxon may be used for multiple tokens. The implementation reserves taxon identifiers greater than or\n  // equal to 2147483648 (0x80000000). If you have no use for this field, set it to 0.\n  NFTokenTaxon: number;\n  // Specifies the fee charged by the issuer for secondary sales of the Token, if such sales are allowed. Valid values\n  // for this field are between 0 and 50000 inclusive, allowing transfer rates between 0.000% and 50.000% in increments\n  // of 0.001%. This field must NOT be present if the tfTransferable flag is not set.\n  transferFee?: number;\n  // URI that points to the data and/or metadata associated with the NFT. This field need not be an HTTP or HTTPS URL;\n  // it could be an IPFS URI, a magnet link, immediate data encoded as an RFC2379 "data" URL, or even an opaque\n  // issuer-specific encoding. The URI is NOT checked for validity, but the field is limited to a maximum length of\n  // 256 bytes.\n  // This field must be hex-encoded.\n  URI?: string;\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type MintNFTFlags = {\n  tfBurnable?: boolean;\n  tfOnlyXRP?: boolean;\n  tfTrustLine?: boolean;\n  tfTransferable?: boolean;\n} | number;\n")),(0,r.kt)("p",null,"More details about the flags can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/transaction-common-fields.html#flags-field"},"here"),"."),(0,r.kt)("h4",{id:"response-11"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NFTokenID"),": The ID of the NFT."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hash"),": The hash of the transaction.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  NFTokenID: string;\n  hash: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-10"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-11"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { mintNFT } from "@gemwallet/api";\n\nconst payload = {\n  URI: "4d696e746564207468726f7567682047656d57616c6c657421",\n  flags: {\n    tfOnlyXRP: true,\n    tfTransferable: true\n  },\n  fee: "199",\n  transferFee: 3000, // 3%,\n  NFTokenTaxon: 0,\n  memos: [\n    {\n      memo: {\n        memoType: "4465736372697074696f6e",\n        memoData: "54657374206d656d6f"\n      }\n    }\n  ]\n};\n\nmintNFT(payload).then((response) => {\n  console.log("NFT ID: ", response.result?.NFTokenID);\n  console.log("Transaction Hash: ", response.result?.hash);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, mintNFT } from "@gemwallet/api";\n\nfunction App() {\n  const handleMintNFT = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const payload = {\n          URI: "4d696e746564207468726f7567682047656d57616c6c657421",\n          flags: {\n            tfOnlyXRP: true,\n            tfTransferable: true\n          },\n          fee: "199",\n          transferFee: 3000, // 3%,\n          NFTokenTaxon: 0,\n          memos: [\n            {\n              memo: {\n                memoType: "4465736372697074696f6e",\n                memoData: "54657374206d656d6f"\n              }\n            }\n          ]\n        };\n        mintNFT(payload).then((response) => {\n          console.log("NFT ID: ", response.result?.NFTokenID);\n          console.log("Transaction Hash: ", response.result?.hash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleMintNFT}>Mint NFT!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"sendpayment"},"sendPayment"),(0,r.kt)("p",null,"Initiates a payment transaction through the extension."),(0,r.kt)("h4",{id:"request-12"},"Request"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mandatory")," - The function takes a payload object as an input parameter, which has properties defined by ",(0,r.kt)("inlineCode",{parentName:"p"},"SendPaymentRequest"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All the fields from ",(0,r.kt)("inlineCode",{parentName:"li"},"BaseTransactionRequest"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"See ",(0,r.kt)("a",{parentName:"li",href:"#basetransactionrequest"},"BaseTransactionRequest")," for more details."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount"),": The amount to deliver, in one of the following formats:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("em",{parentName:"li"},"string")," representing the number of XRP to deliver, in drops."),(0,r.kt)("li",{parentName:"ul"},"An ",(0,r.kt)("em",{parentName:"li"},"object")," where 'value' is a string representing the number of the token to deliver."),(0,r.kt)("li",{parentName:"ul"},"More technical details about the amount formats can be found ",(0,r.kt)("a",{parentName:"li",href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts"},"here"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"destination"),": The unique address of the account receiving the payment."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"destinationTag"),": The destination tag to attach to the transaction."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"flags"),": Flags to set on the transaction.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface SendPaymentRequest extends BaseTransactionRequest {\n  // The amount to deliver, in one of the following formats:\n  // - A string representing the number of XRP to deliver, in drops.\n  // - An object where 'value' is a string representing the number of the token to deliver.\n  amount: Amount;\n  // The unique address of the account receiving the payment\n  destination: string;\n  // The destination tag to attach to the transaction\n  destinationTag?: number;\n  // Flags to set on the transaction\n  flags?: PaymentFlags;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type Amount = {\n  currency: string;\n  issuer: string;\n  value: string;\n} | string;\n")),(0,r.kt)("p",null,"More details about the amount format can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Memo {\n  memo: {\n    memoType?: string;\n    memoData?: string;\n    memoFormat?: string;\n  };\n}\n")),(0,r.kt)("p",null,"More technical details about the memos can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/transaction-common-fields.html#memos-field"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type PaymentFlags = {\n  tfNoDirectRipple?: boolean;\n  tfPartialPayment?: boolean;\n  tfLimitQuality?: boolean;\n} | number;\n")),(0,r.kt)("p",null,"More details about the flags can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/transaction-common-fields.html#flags-field"},"here"),"."),(0,r.kt)("h4",{id:"response-12"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hash"),": The hash of the transaction.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  hash: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-11"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-12"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { sendPayment } from "@gemwallet/api";\n\nconst payload = {\n  amount: "1000000", // In drops (1 XRP)\n  destination: "rLWQskMM8EoPxaLsmuQxE5rYeP4uX7dhym",\n  memos: [\n    {\n      memo: {\n        memoType: "4465736372697074696f6e",\n        memoData: "54657374206d656d6f",\n      },\n    },\n  ],\n  destinationTag: 12,\n  fee: "199",\n  flags: {\n    tfNoDirectRipple: false,\n    tfPartialPayment: false,\n    tfLimitQuality: false,\n  },\n};\n\nsendPayment(payload).then((response) => {\n  console.log(response.result?.hash);\n});\n')),(0,r.kt)("p",null,"Here is an example for an XRP Payment with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, sendPayment } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const payment = {\n          amount: "1000000", // In drops (1 XRP)\n          destination: "rLWQskMM8EoPxaLsmuQxE5rYeP4uX7dhym",\n        };\n        sendPayment(payment).then((response) => {\n          console.log("Transaction Hash: ", response.result?.hash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("p",null,"Here is an example for an ETH Payment with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, sendPayment } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const payment = {\n          amount: {\n            currency: "ETH",\n            value: "0.01", // In currency\n            issuer: "rnm76Qgz4G9G4gZBJVuXVvkbt7gVD7szey",\n          },\n          destination: "rLWQskMM8EoPxaLsmuQxE5rYeP4uX7dhym",\n        };\n        sendPayment(payment).then((trHash) => {\n          console.log("Transaction Hash: ", trHash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"setaccount"},"setAccount"),(0,r.kt)("p",null,"Sets an account through the extension."),(0,r.kt)("h4",{id:"request-13"},"Request"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mandatory")," - The function takes a payload of type ",(0,r.kt)("inlineCode",{parentName:"p"},"SetAccountRequest")," as an input parameter."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All the fields from ",(0,r.kt)("inlineCode",{parentName:"li"},"BaseTransactionRequest"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"See ",(0,r.kt)("a",{parentName:"li",href:"#basetransactionrequest"},"BaseTransactionRequest")," for more details."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"flags"),": Flags to set on the transaction."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"clearFlag"),": Unique identifier of a flag to disable for this account."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"domain"),": The domain that owns this account, as a string of hex representing the ASCII for the domain in lowercase. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Cannot be more than 256 bytes in length."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"emailHash"),": An arbitrary 128-bit value. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Conventionally, clients treat this as the md5 hash of an email address to use for displaying a Gravatar image."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"messageKey"),": Public key for sending encrypted messages to this account. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"To set the key, it must be exactly 33 bytes, with the first byte indicating the key type: 0x02 or 0x03 for secp256k1 keys, 0xED for Ed25519 keys. "),(0,r.kt)("li",{parentName:"ul"},"To remove the key, use an empty value."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NFTokenMinter"),": Another account that can mint NFTokens for you."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setFlag"),": Integer flag to enable for this account."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"transferRate"),": The fee to charge when users transfer this account's tokens, represented as billionths of a unit. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Cannot be more than 2000000000 or less than 1000000000, except for the special case 0 meaning no fee."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tickSize"),": Tick size to use for offers involving a currency issued by this address. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The exchange rates of those offers is rounded to this many significant digits. "),(0,r.kt)("li",{parentName:"ul"},"Valid values are 3 to 15 inclusive, or 0 to disable.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface SetAccountRequest extends BaseTransactionRequest {\n  flags?: SetAccountFlags;\n  // Unique identifier of a flag to disable for this account.\n  clearFlag?: number;\n  // The domain that owns this account, as a string of hex representing the ASCII for the domain in lowercase.\n  // Cannot be more than 256 bytes in length.\n  domain?: string;\n  // An arbitrary 128-bit value. Conventionally, clients treat this as the md5 hash of an email address to use for\n  // displaying a Gravatar image.\n  emailHash?: string;\n  // Public key for sending encrypted messages to this account. To set the key, it must be exactly 33 bytes, with the\n  // first byte indicating the key type: 0x02 or 0x03 for secp256k1 keys, 0xED for Ed25519 keys. To remove the key, use\n  // an empty value.\n  messageKey?: string;\n  // Another account that can mint NFTokens for you.\n  NFTokenMinter?: string;\n  // Integer flag to enable for this account.\n  setFlag?: AccountSetAsfFlags;\n  // The fee to charge when users transfer this account's tokens, represented as billionths of a unit. Cannot be more\n  // than 2000000000 or less than 1000000000, except for the special case 0 meaning no fee.\n  transferRate?: number;\n  // Tick size to use for offers involving a currency issued by this address. The exchange rates of those offers is\n  // rounded to this many significant digits. Valid values are 3 to 15 inclusive, or 0 to disable.\n  tickSize?: number;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type AccountSetFlagsInterface = {\n  tfRequireDestTag?: boolean;\n  tfOptionalDestTag?: boolean;\n  tfRequireAuth?: boolean;\n  tfOptionalAuth?: boolean;\n  tfDisallowXRP?: boolean;\n  tfAllowXRP?: boolean;\n} | number;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"enum AccountSetAsfFlags {\n  asfRequireDest = 1,\n  asfRequireAuth = 2,\n  asfDisallowXRP = 3,\n  asfDisableMaster = 4,\n  asfAccountTxnID = 5,\n  asfNoFreeze = 6,\n  asfGlobalFreeze = 7,\n  asfDefaultRipple = 8,\n  asfDepositAuth = 9,\n  asfAuthorizedNFTokenMinter = 10,\n  asfDisallowIncomingNFTokenOffer = 12,\n  asfDisallowIncomingCheck = 13,\n  asfDisallowIncomingPayChan = 14,\n  asfDisallowIncomingTrustline = 15\n}\n")),(0,r.kt)("h4",{id:"response-13"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hash"),": The hash of the transaction.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  hash: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-12"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-13"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { setAccount } from "@gemwallet/api";\n\nconst payload = {\n  emailHash: "1D1382344586ECFF844DACFF698C2EFB",\n  fee: "199",\n  flags: {\n    tfAllowXRP: true\n  },\n  memos: [\n    {\n      memo: {\n        memoType: "4465736372697074696f6e",\n        memoData: "54657374206d656d6f"\n      }\n    }\n  ]\n};\n\nsetAccount(payload).then((response) => {\n  console.log("Transaction Hash: ", response.result?.hash);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, setAccount } from "@gemwallet/api";\n\nfunction App() {\n  const handleSetAccount = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const payload = {\n          emailHash: "1D1382344586ECFF844DACFF698C2EFB",\n          fee: "199",\n          flags: {\n            tfAllowXRP: true\n          },\n          memos: [\n            {\n              memo: {\n                memoType: "4465736372697074696f6e",\n                memoData: "54657374206d656d6f"\n              }\n            }\n          ]\n        };\n        setAccount(payload).then((response) => {\n          console.log("Transaction Hash: ", response.result?.hash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleSetAccount}>Set Account</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"settrustline"},"setTrustLine"),(0,r.kt)("p",null,"Adds or edits a trustline within the wallet."),(0,r.kt)("h4",{id:"request-14"},"Request"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mandatory")," - The function takes a payload of type ",(0,r.kt)("inlineCode",{parentName:"p"},"SetTrustlineRequest")," as an input parameter."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All the fields from ",(0,r.kt)("inlineCode",{parentName:"li"},"BaseTransactionRequest"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"See ",(0,r.kt)("a",{parentName:"li",href:"#basetransactionrequest"},"BaseTransactionRequest")," for more details."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"limitAmount"),": The maximum amount of currency that can be exchanged to the trustline.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"More technical details about the amount formats can be found ",(0,r.kt)("a",{parentName:"li",href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts"},"here"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"flags"),": Flags to set on the transaction.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface SetTrustlineRequest extends BaseTransactionRequest {\n  // The maximum amount of currency that can be exchanged to the trustline\n  limitAmount: IssuedCurrencyAmount;\n  // Flags to set on the transaction\n  flags?: TrustSetFlags;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface IssuedCurrencyAmount {\n  currency: string;\n  issuer: string;\n  value: string;\n}\n")),(0,r.kt)("p",null,"More technical details about the currency amount formats can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/basic-data-types.html#specifying-currency-amounts"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Memo {\n  memo: {\n    memoType?: string;\n    memoData?: string;\n    memoFormat?: string;\n  };\n}\n")),(0,r.kt)("p",null,"More technical details about the memos can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/transaction-common-fields.html#memos-field"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type TrustSetFlags = {\n  tfSetfAuth?: boolean;\n  tfSetNoRipple?: boolean;\n  tfClearNoRipple?: boolean;\n  tfSetFreeze?: boolean;\n  tfClearFreeze?: boolean;\n} | number;\n")),(0,r.kt)("p",null,"More details about the flags can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/transaction-common-fields.html#flags-field"},"here"),"."),(0,r.kt)("h4",{id:"response-14"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hash"),": The hash of the transaction.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  hash: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-13"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-14"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { setTrustline } from "@gemwallet/api";\n\nconst trustline = {\n  limitAmount: {\n    currency: "ETH",\n    issuer: "rnm76Qgz4G9G4gZBJVuXVvkbt7gVD7szey",\n    value: "10000000",\n  },\n  memos: [\n    {\n      memo: {\n        memoType: "4465736372697074696f6e",\n        memoData: "54657374206d656d6f",\n      },\n    },\n  ],\n  fee: "199",\n  flags: {\n    tfClearFreeze: false,\n    tfClearNoRipple: false,\n    tfSetFreeze: true,\n    tfSetNoRipple: true,\n    tfSetfAuth: false,\n  },\n};\n\nsetTrustline(trustline).then((response) => {\n  console.log(response.result?.hash);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, addTrustline } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const transaction = {\n          limitAmount: {\n            currency: "ETH",\n            issuer: "rnm76Qgz4G9G4gZBJVuXVvkbt7gVD7szey",\n            value: "10000000",\n          },\n        };\n        addTrustline(transaction).then((response) => {\n          console.log("Transaction Hash: ", response.result?.hash);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h3",{id:"signmessage"},"signMessage"),(0,r.kt)("p",null,"Signs a message using the private key of the user's wallet."),(0,r.kt)("h4",{id:"request-15"},"Request"),(0,r.kt)("p",null,"The function takes a message string as an input parameter."),(0,r.kt)("h4",{id:"response-15"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"signedMessage"),": The signed message.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  signedMessage: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-14"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-15"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { signMessage } from "@gemwallet/api";\n\nconst message = "Hello, World!";\n\nsignMessage(message).then((response) => {\n  console.log(response.result?.signedMessage);\n});\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { isInstalled, signMessage } from "@gemwallet/api";\n\nfunction App() {\n  const handleConnect = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        signMessage("The message I want to get signed").then((response) => {\n          console.log("Signed message: ", response.result?.signedMessage);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleConnect}>Click me!</button>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,r.kt)("h2",{id:"xrpl-protocol-methods"},"XRPL Protocol methods"),(0,r.kt)("h3",{id:"submittransaction"},"submitTransaction"),(0,r.kt)("p",null,"Submits a transaction payload request to the XRPL network via the extension. The transaction will be automatically autofilled, signed and submitted."),(0,r.kt)("h4",{id:"request-16"},"Request"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mandatory")," - The function takes a payload of type ",(0,r.kt)("inlineCode",{parentName:"p"},"SubmitTransactionRequest")," as an input parameter."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"transaction"),": The transaction payload to submit to the XRPL network.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface SubmitTransactionRequest {\n  transaction: Transaction;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export type Transaction = AccountDelete | AccountSet | CheckCancel | CheckCash | CheckCreate | DepositPreauth | EscrowCancel | EscrowCreate | EscrowFinish | NFTokenAcceptOffer | NFTokenBurn | NFTokenCancelOffer | NFTokenCreateOffer | NFTokenMint | OfferCancel | OfferCreate | Payment | PaymentChannelClaim | PaymentChannelCreate | PaymentChannelFund | SetRegularKey | SignerListSet | TicketCreate | TrustSet;\n")),(0,r.kt)("p",null,"Notes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Transaction")," and the other derived types shown here come from ",(0,r.kt)("a",{parentName:"li",href:"https://js.xrpl.org/"},"js.xrpl.org"),"."),(0,r.kt)("li",{parentName:"ul"},"If the transaction field ",(0,r.kt)("inlineCode",{parentName:"li"},"Account")," is not set, the account of the user's wallet will be used.")),(0,r.kt)("h4",{id:"response-16"},"Response"),(0,r.kt)("p",null,"The response is a Promise which resolves to an object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," property."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'"response" | "reject"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hash"),": The hash of the transaction.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "response";\nresult: {\n  hash: string;\n}\n')),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'type: "reject";\nresult: undefined;\n')),(0,r.kt)("h4",{id:"error-handling-15"},"Error Handling"),(0,r.kt)("p",null,"In case of error, the error will be thrown."),(0,r.kt)("h4",{id:"examples-16"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { submitTransaction } from "@gemwallet/api";\n\nconst transaction = {\n  TransactionType: "Payment",\n  Destination: "rhikRdkFw28csKw9z7fVoBjWncz1HSoQij",\n  Amount: "100000",\n  Memos: [\n    {\n      Memo: {\n        MemoData: "54657374206D656D6F",\n        MemoType: "4465736372697074696F6E"\n      }\n    }\n  ]\n};\n\nsubmitTransaction({ transaction }).then((response) => {\n  console.log(response.result?.hash);\n}).catch((error) => {\n  console.error("Transaction submission failed", error);\n});\n\n')),(0,r.kt)("p",null,"Here is an example with a React web application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { submitTransaction, isInstalled } from "@gemwallet/api";\n\nfunction App() {\n  const handleTransaction = () => {\n    isInstalled().then((response) => {\n      if (response.result.isInstalled) {\n        const transaction = {\n          TransactionType: "Payment",\n          Destination: "rhikRdkFw28csKw9z7fVoBjWncz1HSoQij",\n          Amount: "100000",\n          Memos: [\n            {\n              Memo: {\n                MemoData: "54657374206D656D6F",\n                MemoType: "4465736372697074696F6E"\n              }\n            }\n          ]\n        };\n        submitTransaction({ transaction }).then((response) => {\n          console.log("Transaction hash: ", response.result?.hash);\n        }).catch((error) => {\n          console.error("Transaction submission failed", error);\n        });\n      }\n    });\n  };\n\n  return (\n    <div className="App">\n      <button onClick={handleTransaction}>Submit Transaction</button>\n    </div>\n  );\n}\n\nexport default App;\n\n')),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("h3",{id:"login"},"login"),(0,r.kt)("p",null,"This event is triggered when the user logs in to the extension."),(0,r.kt)("h4",{id:"response-17"},"Response"),(0,r.kt)("p",null,"The response is an object with the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"loggedIn"),": A boolean value indicating whether the user is logged in or not.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"{\n  loggedIn: true;\n}\n")),(0,r.kt)("h4",{id:"examples-17"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { on } from "@gemwallet/api";\n\non("login", (response) => {\n  console.log(response.loggedIn);\n});\n')),(0,r.kt)("h3",{id:"logout"},"logout"),(0,r.kt)("p",null,"This event is triggered when the user logs out of the extension."),(0,r.kt)("h4",{id:"response-18"},"Response"),(0,r.kt)("p",null,"The response is an object with the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"loggedIn"),": A boolean value indicating whether the user is logged in or not.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"{\n  loggedIn: false;\n}\n")),(0,r.kt)("h4",{id:"examples-18"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { on } from "@gemwallet/api";\n\non("logout", (response) => {\n  console.log(response.loggedIn);\n});\n')),(0,r.kt)("h3",{id:"networkchanged"},"networkChanged"),(0,r.kt)("p",null,"This event is triggered when the user changes the network in the extension."),(0,r.kt)("h4",{id:"response-19"},"Response"),(0,r.kt)("p",null,"The response is an object with the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"network"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name"),": The name of the network in lowercase, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"mainnet"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"server"),": The URL of the network, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"wss://xrplcluster.com"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"description"),": The description of the network.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"network: {\n  name: string;\n  server: string;\n  description: string;\n}\n")),(0,r.kt)("h4",{id:"examples-19"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { on } from "@gemwallet/api";\n\non("networkChanged", (response) => {\n  console.log(response.network.name);\n});\n')),(0,r.kt)("h3",{id:"walletchanged"},"walletChanged"),(0,r.kt)("p",null,"This event is triggered when the user changes the wallet in the extension."),(0,r.kt)("h4",{id:"response-20"},"Response"),(0,r.kt)("p",null,"The response is an object with the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"wallet"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"publicAddress"),": The public address of the wallet.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"wallet: {\n  publicAddress: string;\n}\n")),(0,r.kt)("h4",{id:"examples-20"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { on } from "@gemwallet/api";\n\non("walletChanged", (response) => {\n  console.log(response.wallet.publicAddress);\n});\n')),(0,r.kt)("h2",{id:"other"},"Other"),(0,r.kt)("h3",{id:"basetransactionrequest"},"BaseTransactionRequest"),(0,r.kt)("p",null,"All the ",(0,r.kt)("inlineCode",{parentName:"p"},"Request")," interfaces that extend the ",(0,r.kt)("inlineCode",{parentName:"p"},"BaseTransactionRequest")," interface also include the following fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fee"),": Integer amount of XRP, in drops, to be destroyed as a cost for distributing this transaction to the network.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Some transaction types have different minimum requirements."),(0,r.kt)("li",{parentName:"ul"},"More technical details about the drops can be found ",(0,r.kt)("a",{parentName:"li",href:"https://xrpl.org/currency-formats.html#xrp-amounts"},"here"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sequence"),": The sequence number of the account sending the transaction. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A transaction is only valid if the Sequence number is exactly 1 greater than the previous transaction from the same account. "),(0,r.kt)("li",{parentName:"ul"},"The special case 0 means the transaction is using a Ticket instead."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"accountTxnID"),": Hash value identifying another transaction. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If provided, this transaction is only valid if the sending account's previously-sent transaction matches the provided hash."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"lastLedgerSequence"),": Highest ledger index this transaction can appear in. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Specifying this field places a strict upper limit on how long the transaction can wait to be validated or rejected."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"memos"),": Additional arbitrary information used to identify this transaction. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Each attribute of each memo must be hex encoded."),(0,r.kt)("li",{parentName:"ul"},"More technical details about the memos can be found ",(0,r.kt)("a",{parentName:"li",href:"https://xrpl.org/transaction-common-fields.html#memos-field"},"here"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"signers"),": Array of objects that represent a multi-signature which authorizes this transaction.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"More technical details about the signers can be found ",(0,r.kt)("a",{parentName:"li",href:"https://xrpl.org/transaction-common-fields.html#signers-field"},"here"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sourceTag"),": Arbitrary integer used to identify the reason for this payment, or a sender on whose behalf this transaction is made. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Conventionally, a refund should specify the initial payment's SourceTag as the refund payment's DestinationTag."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"signingPubKey"),": Hex representation of the public key that corresponds to the private key used to sign this transaction. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If an empty string, indicates a multi-signature is present in the Signers field instead."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ticketSequence"),": The sequence number of the ticket to use in place of a Sequence number. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If this is provided, Sequence must be 0. "),(0,r.kt)("li",{parentName:"ul"},"Cannot be used with AccountTxnID."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"txnSignature"),": The signature that verifies this transaction as originating from the account it says it is from.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface BaseTransactionRequest {\n  // Integer amount of XRP, in drops, to be destroyed as a cost for distributing this transaction to the network.\n  // Some transaction types have different minimum requirements.\n  fee?: string;\n  // The sequence number of the account sending the transaction. A transaction is only valid if the Sequence number is\n  // exactly 1 greater than the previous transaction from the same account. The special case 0 means the transaction is\n  // using a Ticket instead.\n  sequence?: number;\n  // Hash value identifying another transaction. If provided, this transaction is only valid if the sending account's\n  // previously-sent transaction matches the provided hash.\n  accountTxnID?: string;\n  // Highest ledger index this transaction can appear in. Specifying this field places a strict upper limit on how long\n  // the transaction can wait to be validated or rejected.\n  lastLedgerSequence?: number;\n  // Additional arbitrary information used to identify this transaction.\n  // Each attribute of each memo must be hex encoded.\n  memos?: Memo[];\n  // Array of objects that represent a multi-signature which authorizes this transaction.\n  signers?: Signer[];\n  // Arbitrary integer used to identify the reason for this payment, or a sender on whose behalf this transaction is\n  // made. Conventionally, a refund should specify the initial payment's SourceTag as the refund payment's\n  // DestinationTag.\n  sourceTag?: number;\n  // Hex representation of the public key that corresponds to the private key used to sign this transaction. If an empty\n  // string, indicates a multi-signature is present in the Signers field instead.\n  signingPubKey?: string;\n  // The sequence number of the ticket to use in place of a Sequence number. If this is provided, Sequence must be 0.\n  // Cannot be used with AccountTxnID.\n  ticketSequence?: number;\n  // The signature that verifies this transaction as originating from the account it says it is from.\n  txnSignature?: string;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Memo {\n  memo: {\n    memoType?: string;\n    memoData?: string;\n    memoFormat?: string;\n  };\n}\n")),(0,r.kt)("p",null,"More technical details about the memos can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/transaction-common-fields.html#memos-field"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Signer {\n  signer: {\n    account: string;\n    txnSignature: string;\n    signingPubKey: string;\n  };\n}\n")),(0,r.kt)("p",null,"More technical details about the signers can be found ",(0,r.kt)("a",{parentName:"p",href:"https://xrpl.org/transaction-common-fields.html#signers-field"},"here"),"."))}d.isMDXComponent=!0}}]);