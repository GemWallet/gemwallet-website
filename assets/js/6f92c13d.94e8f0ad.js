"use strict";(self.webpackChunkgemwallet_website=self.webpackChunkgemwallet_website||[]).push([[3573],{37376:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=i(85893),s=i(11151);const o={id:"using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN.",sidebar_position:2},r=void 0,l={id:"api/using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN.",source:"@site/versioned_docs/version-1.0.2/api/using-in-browser.md",sourceDirName:"api",slug:"/api/using-gemwallet-in-browser",permalink:"/docs/1.0.2/api/using-gemwallet-in-browser",draft:!1,unlisted:!1,editUrl:"https://github.com/GemWallet/gemwallet-website/blob/master/versioned_docs/version-1.0.2/api/using-in-browser.md",tags:[],version:"1.0.2",sidebarPosition:2,frontMatter:{id:"using-gemwallet-in-browser",title:"Using GemWallet in the browser",description:"Provides the documentation on how to use GemWallet in the browser thanks to our CDN.",sidebar_position:2},sidebar:"docs",previous:{title:"GemWallet API",permalink:"/docs/1.0.2/api/gemwallet-api"},next:{title:"Using GemWallet in Node.js",permalink:"/docs/1.0.2/api/using-gemwallet-in-node-js"}},a={},c=[{value:"Importing the library",id:"importing-the-library",level:2},{value:"Methods",id:"methods",level:2},{value:"isConnected()",id:"isconnected",level:3},{value:"getNetwork()",id:"getnetwork",level:3},{value:"transactionRequest()",id:"transactionrequest",level:3}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"This page assumes that you have GemWallet installed."})}),"\n",(0,t.jsx)(n.h2,{id:"importing-the-library",children:"Importing the library"}),"\n",(0,t.jsxs)(n.p,{children:["Let's first import the library in the ",(0,t.jsx)(n.code,{children:"<head>"})," tag of our page."]}),"\n",(0,t.jsxs)(n.p,{children:["Install the packaged library via script tag using cdnjs, swapping in the desired version number for {version}. You can also replace {version} with ",(0,t.jsx)(n.code,{children:"master"})," to get the last version (not recommended)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<head>\n  <script src="https://cdn.jsdelivr.net/gh/GemWallet/gemwallet-extension@{version}/dist/gemwallet-api.min.js"><\/script>\n</head>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This will expose a global variable called ",(0,t.jsx)(n.code,{children:"window.gemWalletApi"})," that will contain our library."]}),"\n",(0,t.jsx)(n.p,{children:"Now let's dig into what functionalities are available to you."}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"isconnected",children:"isConnected()"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"We recommend that you check if the user is connected before using any of the other methods available."})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"isConnected() -> <Promise<boolean>>"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns ",(0,t.jsx)(n.code,{children:"true"})," if the user has GemWallet extension installed, and ",(0,t.jsx)(n.code,{children:"false"})," otherwise."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'gemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    console.log("User has GemWallet!");\n  } else {\n    console.log("User doesn\'t have GemWallet!");\n  }\n});\n'})}),"\n",(0,t.jsx)(n.h3,{id:"getnetwork",children:"getNetwork()"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"getNetwork() -> <Promise<'TEST'|'MAIN'>>"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns ",(0,t.jsx)(n.code,{children:"TEST"})," if the user is connected to the ",(0,t.jsx)(n.code,{children:"test network"}),", and ",(0,t.jsx)(n.code,{children:"MAIN"})," if connected to the ",(0,t.jsx)(n.code,{children:"main network"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"gemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    gemWalletApi.getNetwork().then((network) => {\n      console.log(`NETWORK: ${network}`);\n    });\n  }\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"transactionrequest",children:"transactionRequest()"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"transactionRequest() -> <Promise<'waiting'|'pending'|'success'|'rejected'>>"})}),"\n",(0,t.jsx)(n.p,{children:"Transaction can have 4 stages:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"waiting"}),": waiting for a user interaction"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pending"}),": transaction is pending to be a success or rejected (in progress)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"success"}),": transaction has been successful"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rejected"}),": transaction has been rejected"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'gemWalletApi.isConnected().then((isConnected) => {\n  if (isConnected) {\n    const transaction = {\n      chain: "xrp",\n      network: "TEST",\n      transaction: "payment",\n      amount: "50",\n      destination: "rMrXopFSnCDSd5Eej4TpeHrV7SPjKtLpo2",\n      token: "xrp",\n      apiVersion: 1,\n    };\n    gemWalletApi.transactionRequest(transaction).then((status) => {\n      console.log(`TRANSACTION STATUS: ${status}`);\n    });\n  }\n});\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);